
cmsis_task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001190  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001338  08001338  00011338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001380  08001380  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001380  08001380  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001380  08001380  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001380  08001380  00011380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001384  08001384  00011384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001388  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  20000064  080013ec  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  080013ec  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000140c  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000709  00000000  00000000  000214e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000238  00000000  00000000  00021bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000018e  00000000  00000000  00021e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000420f  00000000  00000000  00021fb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002a43  00000000  00000000  000261c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00011627  00000000  00000000  00028c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000dac  00000000  00000000  0003a230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  0003afdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000064 	.word	0x20000064
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001320 	.word	0x08001320

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000068 	.word	0x20000068
 80001e4:	08001320 	.word	0x08001320

080001e8 <led_init_all>:
{
  for(uint32_t i = 0 ; i < count ; i++);
}

void led_init_all(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0

	uint32_t *pRccAhb1enr = (uint32_t*)0x40023830;
 80001ee:	4b19      	ldr	r3, [pc, #100]	; (8000254 <led_init_all+0x6c>)
 80001f0:	607b      	str	r3, [r7, #4]
	uint32_t *pGpiodModeReg = (uint32_t*)0x40020C00;
 80001f2:	4b19      	ldr	r3, [pc, #100]	; (8000258 <led_init_all+0x70>)
 80001f4:	603b      	str	r3, [r7, #0]


	*pRccAhb1enr |= ( 1 << 3);
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	f043 0208 	orr.w	r2, r3, #8
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	601a      	str	r2, [r3, #0]
	//configure LED_GREEN
	*pGpiodModeReg |= ( 1 << (2 * LED_GREEN));
 8000202:	683b      	ldr	r3, [r7, #0]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800020a:	683b      	ldr	r3, [r7, #0]
 800020c:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_ORANGE));
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_RED));
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_BLUE));
 8000226:	683b      	ldr	r3, [r7, #0]
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	601a      	str	r2, [r3, #0]
	*pGpioOpTypeReg |= ( 1 << (2 * LED_ORANGE));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_RED));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_BLUE));
#endif

    led_off(LED_GREEN);
 8000232:	200c      	movs	r0, #12
 8000234:	f000 f812 	bl	800025c <led_off>
    led_off(LED_ORANGE);
 8000238:	200d      	movs	r0, #13
 800023a:	f000 f80f 	bl	800025c <led_off>
    led_off(LED_RED);
 800023e:	200e      	movs	r0, #14
 8000240:	f000 f80c 	bl	800025c <led_off>
    led_off(LED_BLUE);
 8000244:	200f      	movs	r0, #15
 8000246:	f000 f809 	bl	800025c <led_off>



}
 800024a:	bf00      	nop
 800024c:	3708      	adds	r7, #8
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	40023830 	.word	0x40023830
 8000258:	40020c00 	.word	0x40020c00

0800025c <led_off>:
  *pGpiodDataReg |= ( 1 << led_no);

}

void led_off(uint8_t led_no)
{
 800025c:	b480      	push	{r7}
 800025e:	b085      	sub	sp, #20
 8000260:	af00      	add	r7, sp, #0
 8000262:	4603      	mov	r3, r0
 8000264:	71fb      	strb	r3, [r7, #7]
	  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 8000266:	4b09      	ldr	r3, [pc, #36]	; (800028c <led_off+0x30>)
 8000268:	60fb      	str	r3, [r7, #12]
	  *pGpiodDataReg &= ~( 1 << led_no);
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	79fa      	ldrb	r2, [r7, #7]
 8000270:	2101      	movs	r1, #1
 8000272:	fa01 f202 	lsl.w	r2, r1, r2
 8000276:	43d2      	mvns	r2, r2
 8000278:	401a      	ands	r2, r3
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	601a      	str	r2, [r3, #0]

}
 800027e:	bf00      	nop
 8000280:	3714      	adds	r7, #20
 8000282:	46bd      	mov	sp, r7
 8000284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop
 800028c:	40020c14 	.word	0x40020c14

08000290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	6039      	str	r1, [r7, #0]
 800029a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800029c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	db0a      	blt.n	80002ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a4:	683b      	ldr	r3, [r7, #0]
 80002a6:	b2da      	uxtb	r2, r3
 80002a8:	490c      	ldr	r1, [pc, #48]	; (80002dc <__NVIC_SetPriority+0x4c>)
 80002aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ae:	0112      	lsls	r2, r2, #4
 80002b0:	b2d2      	uxtb	r2, r2
 80002b2:	440b      	add	r3, r1
 80002b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002b8:	e00a      	b.n	80002d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	b2da      	uxtb	r2, r3
 80002be:	4908      	ldr	r1, [pc, #32]	; (80002e0 <__NVIC_SetPriority+0x50>)
 80002c0:	79fb      	ldrb	r3, [r7, #7]
 80002c2:	f003 030f 	and.w	r3, r3, #15
 80002c6:	3b04      	subs	r3, #4
 80002c8:	0112      	lsls	r2, r2, #4
 80002ca:	b2d2      	uxtb	r2, r2
 80002cc:	440b      	add	r3, r1
 80002ce:	761a      	strb	r2, [r3, #24]
}
 80002d0:	bf00      	nop
 80002d2:	370c      	adds	r7, #12
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr
 80002dc:	e000e100 	.word	0xe000e100
 80002e0:	e000ed00 	.word	0xe000ed00

080002e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	3b01      	subs	r3, #1
 80002f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80002f4:	d301      	bcc.n	80002fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80002f6:	2301      	movs	r3, #1
 80002f8:	e00f      	b.n	800031a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002fa:	4a0a      	ldr	r2, [pc, #40]	; (8000324 <SysTick_Config+0x40>)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	3b01      	subs	r3, #1
 8000300:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000302:	210f      	movs	r1, #15
 8000304:	f04f 30ff 	mov.w	r0, #4294967295
 8000308:	f7ff ffc2 	bl	8000290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800030c:	4b05      	ldr	r3, [pc, #20]	; (8000324 <SysTick_Config+0x40>)
 800030e:	2200      	movs	r2, #0
 8000310:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000312:	4b04      	ldr	r3, [pc, #16]	; (8000324 <SysTick_Config+0x40>)
 8000314:	2207      	movs	r2, #7
 8000316:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000318:	2300      	movs	r3, #0
}
 800031a:	4618      	mov	r0, r3
 800031c:	3708      	adds	r7, #8
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	e000e010 	.word	0xe000e010

08000328 <main>:
}TCB_t;

TCB_t user_tasks[MAX_TASKS];
debug_st debug;
int main(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0

	enable_processor_faults();
 800032c:	f000 f902 	bl	8000534 <enable_processor_faults>

	init_scheduler_stack(SCHED_STACK_START);
 8000330:	4807      	ldr	r0, [pc, #28]	; (8000350 <main+0x28>)
 8000332:	f000 f869 	bl	8000408 <init_scheduler_stack>

	init_tasks_stack();
 8000336:	f000 f86f 	bl	8000418 <init_tasks_stack>

	led_init_all();
 800033a:	f7ff ff55 	bl	80001e8 <led_init_all>

	init_systick_timer(TICK_HZ);
 800033e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000342:	f000 f84d 	bl	80003e0 <init_systick_timer>

	switch_sp_to_psp();
 8000346:	f000 f97d 	bl	8000644 <switch_sp_to_psp>

	task1_handler();
 800034a:	f000 f811 	bl	8000370 <task1_handler>

	for(;;);
 800034e:	e7fe      	b.n	800034e <main+0x26>
 8000350:	2001ec00 	.word	0x2001ec00

08000354 <idle_task>:
}


void idle_task(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
	while(1)
	{
		debug.task_handler_counter[0]++;
 8000358:	4b04      	ldr	r3, [pc, #16]	; (800036c <idle_task+0x18>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	3301      	adds	r3, #1
 800035e:	4a03      	ldr	r2, [pc, #12]	; (800036c <idle_task+0x18>)
 8000360:	6013      	str	r3, [r2, #0]
		task_delay(100);
 8000362:	2064      	movs	r0, #100	; 0x64
 8000364:	f000 f98c 	bl	8000680 <task_delay>
		debug.task_handler_counter[0]++;
 8000368:	e7f6      	b.n	8000358 <idle_task+0x4>
 800036a:	bf00      	nop
 800036c:	200000d4 	.word	0x200000d4

08000370 <task1_handler>:
	}
}


void task1_handler(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
	while(1)
	{
		debug.task_handler_counter[1]++;
 8000374:	4b04      	ldr	r3, [pc, #16]	; (8000388 <task1_handler+0x18>)
 8000376:	685b      	ldr	r3, [r3, #4]
 8000378:	3301      	adds	r3, #1
 800037a:	4a03      	ldr	r2, [pc, #12]	; (8000388 <task1_handler+0x18>)
 800037c:	6053      	str	r3, [r2, #4]
		task_delay(100);
 800037e:	2064      	movs	r0, #100	; 0x64
 8000380:	f000 f97e 	bl	8000680 <task_delay>
		debug.task_handler_counter[1]++;
 8000384:	e7f6      	b.n	8000374 <task1_handler+0x4>
 8000386:	bf00      	nop
 8000388:	200000d4 	.word	0x200000d4

0800038c <task2_handler>:
	}

}

void task2_handler(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
	while(1)
	{
		debug.task_handler_counter[2]++;
 8000390:	4b04      	ldr	r3, [pc, #16]	; (80003a4 <task2_handler+0x18>)
 8000392:	689b      	ldr	r3, [r3, #8]
 8000394:	3301      	adds	r3, #1
 8000396:	4a03      	ldr	r2, [pc, #12]	; (80003a4 <task2_handler+0x18>)
 8000398:	6093      	str	r3, [r2, #8]
		task_delay(100);
 800039a:	2064      	movs	r0, #100	; 0x64
 800039c:	f000 f970 	bl	8000680 <task_delay>
		debug.task_handler_counter[2]++;
 80003a0:	e7f6      	b.n	8000390 <task2_handler+0x4>
 80003a2:	bf00      	nop
 80003a4:	200000d4 	.word	0x200000d4

080003a8 <task3_handler>:
	}

}

void task3_handler(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
	while(1)
	{
		debug.task_handler_counter[3]++;
 80003ac:	4b04      	ldr	r3, [pc, #16]	; (80003c0 <task3_handler+0x18>)
 80003ae:	68db      	ldr	r3, [r3, #12]
 80003b0:	3301      	adds	r3, #1
 80003b2:	4a03      	ldr	r2, [pc, #12]	; (80003c0 <task3_handler+0x18>)
 80003b4:	60d3      	str	r3, [r2, #12]
		task_delay(100);
 80003b6:	2064      	movs	r0, #100	; 0x64
 80003b8:	f000 f962 	bl	8000680 <task_delay>
		debug.task_handler_counter[3]++;
 80003bc:	e7f6      	b.n	80003ac <task3_handler+0x4>
 80003be:	bf00      	nop
 80003c0:	200000d4 	.word	0x200000d4

080003c4 <task4_handler>:

}

void task4_handler(void)

{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
	while(1)
	{
		debug.task_handler_counter[4]++;
 80003c8:	4b04      	ldr	r3, [pc, #16]	; (80003dc <task4_handler+0x18>)
 80003ca:	691b      	ldr	r3, [r3, #16]
 80003cc:	3301      	adds	r3, #1
 80003ce:	4a03      	ldr	r2, [pc, #12]	; (80003dc <task4_handler+0x18>)
 80003d0:	6113      	str	r3, [r2, #16]
		task_delay(100);
 80003d2:	2064      	movs	r0, #100	; 0x64
 80003d4:	f000 f954 	bl	8000680 <task_delay>
		debug.task_handler_counter[4]++;
 80003d8:	e7f6      	b.n	80003c8 <task4_handler+0x4>
 80003da:	bf00      	nop
 80003dc:	200000d4 	.word	0x200000d4

080003e0 <init_systick_timer>:

}


void init_systick_timer(uint32_t tick_hz)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b084      	sub	sp, #16
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]

    uint32_t ticks = (SYSTICK_TIM_CLK/tick_hz)-1;
 80003e8:	4a06      	ldr	r2, [pc, #24]	; (8000404 <init_systick_timer+0x24>)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80003f0:	3b01      	subs	r3, #1
 80003f2:	60fb      	str	r3, [r7, #12]

    SysTick_Config(ticks);
 80003f4:	68f8      	ldr	r0, [r7, #12]
 80003f6:	f7ff ff75 	bl	80002e4 <SysTick_Config>

}
 80003fa:	bf00      	nop
 80003fc:	3710      	adds	r7, #16
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	00f42400 	.word	0x00f42400

08000408 <init_scheduler_stack>:


__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack)
{
 8000408:	4603      	mov	r3, r0
 800040a:	461c      	mov	r4, r3
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800040c:	f384 8808 	msr	MSP, r4
}
 8000410:	bf00      	nop
     __set_MSP(sched_top_of_stack);
     __asm volatile("BX LR");
 8000412:	4770      	bx	lr

}
 8000414:	bf00      	nop
	...

08000418 <init_tasks_stack>:




void init_tasks_stack(void)
{
 8000418:	b480      	push	{r7}
 800041a:	b085      	sub	sp, #20
 800041c:	af00      	add	r7, sp, #0

	user_tasks[0].current_state = TASK_READY_STATE;
 800041e:	4b3a      	ldr	r3, [pc, #232]	; (8000508 <init_tasks_stack+0xf0>)
 8000420:	2200      	movs	r2, #0
 8000422:	721a      	strb	r2, [r3, #8]
	user_tasks[1].current_state = TASK_READY_STATE;
 8000424:	4b38      	ldr	r3, [pc, #224]	; (8000508 <init_tasks_stack+0xf0>)
 8000426:	2200      	movs	r2, #0
 8000428:	761a      	strb	r2, [r3, #24]
	user_tasks[2].current_state = TASK_READY_STATE;
 800042a:	4b37      	ldr	r3, [pc, #220]	; (8000508 <init_tasks_stack+0xf0>)
 800042c:	2200      	movs	r2, #0
 800042e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	user_tasks[3].current_state = TASK_READY_STATE;
 8000432:	4b35      	ldr	r3, [pc, #212]	; (8000508 <init_tasks_stack+0xf0>)
 8000434:	2200      	movs	r2, #0
 8000436:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	user_tasks[4].current_state = TASK_READY_STATE;
 800043a:	4b33      	ldr	r3, [pc, #204]	; (8000508 <init_tasks_stack+0xf0>)
 800043c:	2200      	movs	r2, #0
 800043e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	user_tasks[0].psp_value = IDLE_STACK_START;
 8000442:	4b31      	ldr	r3, [pc, #196]	; (8000508 <init_tasks_stack+0xf0>)
 8000444:	4a31      	ldr	r2, [pc, #196]	; (800050c <init_tasks_stack+0xf4>)
 8000446:	601a      	str	r2, [r3, #0]
	user_tasks[1].psp_value = T1_STACK_START;
 8000448:	4b2f      	ldr	r3, [pc, #188]	; (8000508 <init_tasks_stack+0xf0>)
 800044a:	4a31      	ldr	r2, [pc, #196]	; (8000510 <init_tasks_stack+0xf8>)
 800044c:	611a      	str	r2, [r3, #16]
	user_tasks[2].psp_value = T2_STACK_START;
 800044e:	4b2e      	ldr	r3, [pc, #184]	; (8000508 <init_tasks_stack+0xf0>)
 8000450:	4a30      	ldr	r2, [pc, #192]	; (8000514 <init_tasks_stack+0xfc>)
 8000452:	621a      	str	r2, [r3, #32]
	user_tasks[3].psp_value = T3_STACK_START;
 8000454:	4b2c      	ldr	r3, [pc, #176]	; (8000508 <init_tasks_stack+0xf0>)
 8000456:	4a30      	ldr	r2, [pc, #192]	; (8000518 <init_tasks_stack+0x100>)
 8000458:	631a      	str	r2, [r3, #48]	; 0x30
	user_tasks[4].psp_value = T4_STACK_START;
 800045a:	4b2b      	ldr	r3, [pc, #172]	; (8000508 <init_tasks_stack+0xf0>)
 800045c:	4a2f      	ldr	r2, [pc, #188]	; (800051c <init_tasks_stack+0x104>)
 800045e:	641a      	str	r2, [r3, #64]	; 0x40

	user_tasks[0].task_handler = idle_task;
 8000460:	4b29      	ldr	r3, [pc, #164]	; (8000508 <init_tasks_stack+0xf0>)
 8000462:	4a2f      	ldr	r2, [pc, #188]	; (8000520 <init_tasks_stack+0x108>)
 8000464:	60da      	str	r2, [r3, #12]
	user_tasks[1].task_handler = task1_handler;
 8000466:	4b28      	ldr	r3, [pc, #160]	; (8000508 <init_tasks_stack+0xf0>)
 8000468:	4a2e      	ldr	r2, [pc, #184]	; (8000524 <init_tasks_stack+0x10c>)
 800046a:	61da      	str	r2, [r3, #28]
	user_tasks[2].task_handler = task2_handler;
 800046c:	4b26      	ldr	r3, [pc, #152]	; (8000508 <init_tasks_stack+0xf0>)
 800046e:	4a2e      	ldr	r2, [pc, #184]	; (8000528 <init_tasks_stack+0x110>)
 8000470:	62da      	str	r2, [r3, #44]	; 0x2c
	user_tasks[3].task_handler = task3_handler;
 8000472:	4b25      	ldr	r3, [pc, #148]	; (8000508 <init_tasks_stack+0xf0>)
 8000474:	4a2d      	ldr	r2, [pc, #180]	; (800052c <init_tasks_stack+0x114>)
 8000476:	63da      	str	r2, [r3, #60]	; 0x3c
	user_tasks[4].task_handler = task4_handler;
 8000478:	4b23      	ldr	r3, [pc, #140]	; (8000508 <init_tasks_stack+0xf0>)
 800047a:	4a2d      	ldr	r2, [pc, #180]	; (8000530 <init_tasks_stack+0x118>)
 800047c:	64da      	str	r2, [r3, #76]	; 0x4c


	uint32_t *pPSP;

	for(int i = 0 ; i < MAX_TASKS ;i++)
 800047e:	2300      	movs	r3, #0
 8000480:	60bb      	str	r3, [r7, #8]
 8000482:	e037      	b.n	80004f4 <init_tasks_stack+0xdc>
	{
		pPSP = (uint32_t*) user_tasks[i].psp_value;
 8000484:	4a20      	ldr	r2, [pc, #128]	; (8000508 <init_tasks_stack+0xf0>)
 8000486:	68bb      	ldr	r3, [r7, #8]
 8000488:	011b      	lsls	r3, r3, #4
 800048a:	4413      	add	r3, r2
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	60fb      	str	r3, [r7, #12]

		pPSP--;
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	3b04      	subs	r3, #4
 8000494:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR;//0x00100000
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800049c:	601a      	str	r2, [r3, #0]

		pPSP--; //PC
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	3b04      	subs	r3, #4
 80004a2:	60fb      	str	r3, [r7, #12]
		*pPSP = (uint32_t) user_tasks[i].task_handler;
 80004a4:	4a18      	ldr	r2, [pc, #96]	; (8000508 <init_tasks_stack+0xf0>)
 80004a6:	68bb      	ldr	r3, [r7, #8]
 80004a8:	011b      	lsls	r3, r3, #4
 80004aa:	4413      	add	r3, r2
 80004ac:	330c      	adds	r3, #12
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	461a      	mov	r2, r3
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	601a      	str	r2, [r3, #0]


		pPSP--; //LR
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	3b04      	subs	r3, #4
 80004ba:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	f06f 0202 	mvn.w	r2, #2
 80004c2:	601a      	str	r2, [r3, #0]

		for(int j = 0 ; j < 13 ; j++)
 80004c4:	2300      	movs	r3, #0
 80004c6:	607b      	str	r3, [r7, #4]
 80004c8:	e008      	b.n	80004dc <init_tasks_stack+0xc4>
		{
			pPSP--;
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	3b04      	subs	r3, #4
 80004ce:	60fb      	str	r3, [r7, #12]
		    *pPSP = 0;
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
		for(int j = 0 ; j < 13 ; j++)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	3301      	adds	r3, #1
 80004da:	607b      	str	r3, [r7, #4]
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	2b0c      	cmp	r3, #12
 80004e0:	ddf3      	ble.n	80004ca <init_tasks_stack+0xb2>

		}

		user_tasks[i].psp_value = (uint32_t)pPSP;
 80004e2:	68fa      	ldr	r2, [r7, #12]
 80004e4:	4908      	ldr	r1, [pc, #32]	; (8000508 <init_tasks_stack+0xf0>)
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	011b      	lsls	r3, r3, #4
 80004ea:	440b      	add	r3, r1
 80004ec:	601a      	str	r2, [r3, #0]
	for(int i = 0 ; i < MAX_TASKS ;i++)
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	3301      	adds	r3, #1
 80004f2:	60bb      	str	r3, [r7, #8]
 80004f4:	68bb      	ldr	r3, [r7, #8]
 80004f6:	2b04      	cmp	r3, #4
 80004f8:	ddc4      	ble.n	8000484 <init_tasks_stack+0x6c>


	}

}
 80004fa:	bf00      	nop
 80004fc:	bf00      	nop
 80004fe:	3714      	adds	r7, #20
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr
 8000508:	20000084 	.word	0x20000084
 800050c:	2001f000 	.word	0x2001f000
 8000510:	20020000 	.word	0x20020000
 8000514:	2001fc00 	.word	0x2001fc00
 8000518:	2001f800 	.word	0x2001f800
 800051c:	2001f400 	.word	0x2001f400
 8000520:	08000355 	.word	0x08000355
 8000524:	08000371 	.word	0x08000371
 8000528:	0800038d 	.word	0x0800038d
 800052c:	080003a9 	.word	0x080003a9
 8000530:	080003c5 	.word	0x080003c5

08000534 <enable_processor_faults>:

void enable_processor_faults(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
	SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000538:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <enable_processor_faults+0x34>)
 800053a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800053c:	4a0a      	ldr	r2, [pc, #40]	; (8000568 <enable_processor_faults+0x34>)
 800053e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000542:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->SHCSR |= SCB_SHCSR_BUSFAULTENA_Msk;
 8000544:	4b08      	ldr	r3, [pc, #32]	; (8000568 <enable_processor_faults+0x34>)
 8000546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000548:	4a07      	ldr	r2, [pc, #28]	; (8000568 <enable_processor_faults+0x34>)
 800054a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800054e:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk;
 8000550:	4b05      	ldr	r3, [pc, #20]	; (8000568 <enable_processor_faults+0x34>)
 8000552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000554:	4a04      	ldr	r2, [pc, #16]	; (8000568 <enable_processor_faults+0x34>)
 8000556:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800055a:	6253      	str	r3, [r2, #36]	; 0x24

}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	e000ed00 	.word	0xe000ed00

0800056c <get_psp_value>:


uint32_t get_psp_value(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0

	return user_tasks[current_task].psp_value;
 8000570:	4b05      	ldr	r3, [pc, #20]	; (8000588 <get_psp_value+0x1c>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	4a05      	ldr	r2, [pc, #20]	; (800058c <get_psp_value+0x20>)
 8000576:	011b      	lsls	r3, r3, #4
 8000578:	4413      	add	r3, r2
 800057a:	681b      	ldr	r3, [r3, #0]
}
 800057c:	4618      	mov	r0, r3
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	20000000 	.word	0x20000000
 800058c:	20000084 	.word	0x20000084

08000590 <save_psp_value>:


void save_psp_value(uint32_t current_psp_value)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	user_tasks[current_task].psp_value = current_psp_value;
 8000598:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <save_psp_value+0x24>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	4a06      	ldr	r2, [pc, #24]	; (80005b8 <save_psp_value+0x28>)
 800059e:	011b      	lsls	r3, r3, #4
 80005a0:	4413      	add	r3, r2
 80005a2:	687a      	ldr	r2, [r7, #4]
 80005a4:	601a      	str	r2, [r3, #0]
}
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	20000000 	.word	0x20000000
 80005b8:	20000084 	.word	0x20000084

080005bc <update_next_task>:


void update_next_task(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
	int state = TASK_BLOCKED_STATE;
 80005c2:	23ff      	movs	r3, #255	; 0xff
 80005c4:	607b      	str	r3, [r7, #4]

	for(int i= 0 ; i < (MAX_TASKS) ; i++)
 80005c6:	2300      	movs	r3, #0
 80005c8:	603b      	str	r3, [r7, #0]
 80005ca:	e024      	b.n	8000616 <update_next_task+0x5a>
	{
		current_task++;
 80005cc:	4b1a      	ldr	r3, [pc, #104]	; (8000638 <update_next_task+0x7c>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	3301      	adds	r3, #1
 80005d2:	b2da      	uxtb	r2, r3
 80005d4:	4b18      	ldr	r3, [pc, #96]	; (8000638 <update_next_task+0x7c>)
 80005d6:	701a      	strb	r2, [r3, #0]
	    current_task %= MAX_TASKS;
 80005d8:	4b17      	ldr	r3, [pc, #92]	; (8000638 <update_next_task+0x7c>)
 80005da:	781a      	ldrb	r2, [r3, #0]
 80005dc:	4b17      	ldr	r3, [pc, #92]	; (800063c <update_next_task+0x80>)
 80005de:	fba3 1302 	umull	r1, r3, r3, r2
 80005e2:	0899      	lsrs	r1, r3, #2
 80005e4:	460b      	mov	r3, r1
 80005e6:	009b      	lsls	r3, r3, #2
 80005e8:	440b      	add	r3, r1
 80005ea:	1ad3      	subs	r3, r2, r3
 80005ec:	b2da      	uxtb	r2, r3
 80005ee:	4b12      	ldr	r3, [pc, #72]	; (8000638 <update_next_task+0x7c>)
 80005f0:	701a      	strb	r2, [r3, #0]
		state = user_tasks[current_task].current_state;
 80005f2:	4b11      	ldr	r3, [pc, #68]	; (8000638 <update_next_task+0x7c>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	4a12      	ldr	r2, [pc, #72]	; (8000640 <update_next_task+0x84>)
 80005f8:	011b      	lsls	r3, r3, #4
 80005fa:	4413      	add	r3, r2
 80005fc:	3308      	adds	r3, #8
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	607b      	str	r3, [r7, #4]
		if( (state == TASK_READY_STATE) && (current_task != 0) )
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d103      	bne.n	8000610 <update_next_task+0x54>
 8000608:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <update_next_task+0x7c>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d106      	bne.n	800061e <update_next_task+0x62>
	for(int i= 0 ; i < (MAX_TASKS) ; i++)
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	3301      	adds	r3, #1
 8000614:	603b      	str	r3, [r7, #0]
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	2b04      	cmp	r3, #4
 800061a:	ddd7      	ble.n	80005cc <update_next_task+0x10>
 800061c:	e000      	b.n	8000620 <update_next_task+0x64>
			break;
 800061e:	bf00      	nop
	}

	if(state != TASK_READY_STATE)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d002      	beq.n	800062c <update_next_task+0x70>
		current_task = 0;
 8000626:	4b04      	ldr	r3, [pc, #16]	; (8000638 <update_next_task+0x7c>)
 8000628:	2200      	movs	r2, #0
 800062a:	701a      	strb	r2, [r3, #0]
}
 800062c:	bf00      	nop
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	20000000 	.word	0x20000000
 800063c:	cccccccd 	.word	0xcccccccd
 8000640:	20000084 	.word	0x20000084

08000644 <switch_sp_to_psp>:
__attribute__((naked)) void switch_sp_to_psp(void)
{
    //1. initialize the PSP with TASK1 stack start address

	//get the value of psp of current_task
	__asm volatile ("PUSH {LR}"); //preserve LR which connects back to main()
 8000644:	b500      	push	{lr}
	__asm volatile ("BL get_psp_value");
 8000646:	f7ff ff91 	bl	800056c <get_psp_value>
	__asm volatile ("MSR PSP,R0"); //initialize psp
 800064a:	f380 8809 	msr	PSP, r0
	__asm volatile ("POP {LR}");  //pops back LR value
 800064e:	f85d eb04 	ldr.w	lr, [sp], #4

	//2. change SP to PSP using CONTROL register
	__asm volatile ("MOV R0,#0X02");
 8000652:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL,R0");
 8000656:	f380 8814 	msr	CONTROL, r0
	__asm volatile ("BX LR");
 800065a:	4770      	bx	lr
}
 800065c:	bf00      	nop
	...

08000660 <schedule>:


void schedule(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
	//pend the pendsv exception
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000664:	4b05      	ldr	r3, [pc, #20]	; (800067c <schedule+0x1c>)
 8000666:	685b      	ldr	r3, [r3, #4]
 8000668:	4a04      	ldr	r2, [pc, #16]	; (800067c <schedule+0x1c>)
 800066a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066e:	6053      	str	r3, [r2, #4]

}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	e000ed00 	.word	0xe000ed00

08000680 <task_delay>:




void task_delay(uint32_t tick_count)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	//disable interrupt
	INTERRUPT_DISABLE();
 8000688:	f04f 0001 	mov.w	r0, #1
 800068c:	f380 8810 	msr	PRIMASK, r0

	if(current_task)
 8000690:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <task_delay+0x54>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d015      	beq.n	80006c4 <task_delay+0x44>
	{
	   user_tasks[current_task].block_count = g_tick_count + tick_count;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <task_delay+0x58>)
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	4b0d      	ldr	r3, [pc, #52]	; (80006d4 <task_delay+0x54>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	4618      	mov	r0, r3
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	441a      	add	r2, r3
 80006a6:	490d      	ldr	r1, [pc, #52]	; (80006dc <task_delay+0x5c>)
 80006a8:	0103      	lsls	r3, r0, #4
 80006aa:	440b      	add	r3, r1
 80006ac:	3304      	adds	r3, #4
 80006ae:	601a      	str	r2, [r3, #0]
	   user_tasks[current_task].current_state = TASK_BLOCKED_STATE;
 80006b0:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <task_delay+0x54>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	4a09      	ldr	r2, [pc, #36]	; (80006dc <task_delay+0x5c>)
 80006b6:	011b      	lsls	r3, r3, #4
 80006b8:	4413      	add	r3, r2
 80006ba:	3308      	adds	r3, #8
 80006bc:	22ff      	movs	r2, #255	; 0xff
 80006be:	701a      	strb	r2, [r3, #0]
	   schedule();
 80006c0:	f7ff ffce 	bl	8000660 <schedule>
	}

	//enable interrupt
	INTERRUPT_ENABLE();
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	f380 8810 	msr	PRIMASK, r0
}
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000000 	.word	0x20000000
 80006d8:	20000080 	.word	0x20000080
 80006dc:	20000084 	.word	0x20000084

080006e0 <PendSV_Handler>:
{

	/*Save the context of current task */

	//1. Get current running task's PSP value
	__asm volatile("MRS R0,PSP");
 80006e0:	f3ef 8009 	mrs	r0, PSP
	//2. Using that PSP value store SF2( R4 to R11)
	__asm volatile("STMDB R0!,{R4-R11}");
 80006e4:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	__asm volatile("PUSH {LR}");
 80006e8:	b500      	push	{lr}

	//3. Save the current value of PSP
    __asm volatile("BL save_psp_value");
 80006ea:	f7ff ff51 	bl	8000590 <save_psp_value>


	/*Retrieve the context of next task */

	//1. Decide next task to run
    __asm volatile("BL update_next_task");
 80006ee:	f7ff ff65 	bl	80005bc <update_next_task>

	//2. get its past PSP value
	__asm volatile ("BL get_psp_value");
 80006f2:	f7ff ff3b 	bl	800056c <get_psp_value>

	//3. Using that PSP value retrieve SF2(R4 to R11)
	__asm volatile ("LDMIA R0!,{R4-R11}");
 80006f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	//4. update PSP and exit
	__asm volatile("MSR PSP,R0");
 80006fa:	f380 8809 	msr	PSP, r0

	__asm volatile("POP {LR}");
 80006fe:	f85d eb04 	ldr.w	lr, [sp], #4

	__asm volatile("BX LR");
 8000702:	4770      	bx	lr



}
 8000704:	bf00      	nop
	...

08000708 <update_global_tick_count>:


void update_global_tick_count(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
	g_tick_count++;
 800070c:	4b04      	ldr	r3, [pc, #16]	; (8000720 <update_global_tick_count+0x18>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	3301      	adds	r3, #1
 8000712:	4a03      	ldr	r2, [pc, #12]	; (8000720 <update_global_tick_count+0x18>)
 8000714:	6013      	str	r3, [r2, #0]
}
 8000716:	bf00      	nop
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr
 8000720:	20000080 	.word	0x20000080

08000724 <unblock_tasks>:

void unblock_tasks(void)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
	for(int i = 1 ; i < MAX_TASKS ; i++)
 800072a:	2301      	movs	r3, #1
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	e01b      	b.n	8000768 <unblock_tasks+0x44>
	{
		if(user_tasks[i].current_state != TASK_READY_STATE)
 8000730:	4a12      	ldr	r2, [pc, #72]	; (800077c <unblock_tasks+0x58>)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	011b      	lsls	r3, r3, #4
 8000736:	4413      	add	r3, r2
 8000738:	3308      	adds	r3, #8
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d010      	beq.n	8000762 <unblock_tasks+0x3e>
		{
			if(user_tasks[i].block_count == g_tick_count)
 8000740:	4a0e      	ldr	r2, [pc, #56]	; (800077c <unblock_tasks+0x58>)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	011b      	lsls	r3, r3, #4
 8000746:	4413      	add	r3, r2
 8000748:	3304      	adds	r3, #4
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <unblock_tasks+0x5c>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	429a      	cmp	r2, r3
 8000752:	d106      	bne.n	8000762 <unblock_tasks+0x3e>
			{
				user_tasks[i].current_state = TASK_READY_STATE;
 8000754:	4a09      	ldr	r2, [pc, #36]	; (800077c <unblock_tasks+0x58>)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	011b      	lsls	r3, r3, #4
 800075a:	4413      	add	r3, r2
 800075c:	3308      	adds	r3, #8
 800075e:	2200      	movs	r2, #0
 8000760:	701a      	strb	r2, [r3, #0]
	for(int i = 1 ; i < MAX_TASKS ; i++)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	3301      	adds	r3, #1
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2b04      	cmp	r3, #4
 800076c:	dde0      	ble.n	8000730 <unblock_tasks+0xc>
			}
		}

	}

}
 800076e:	bf00      	nop
 8000770:	bf00      	nop
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	20000084 	.word	0x20000084
 8000780:	20000080 	.word	0x20000080

08000784 <SysTick_Handler>:


void  SysTick_Handler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0

    update_global_tick_count();
 8000788:	f7ff ffbe 	bl	8000708 <update_global_tick_count>

    unblock_tasks();
 800078c:	f7ff ffca 	bl	8000724 <unblock_tasks>

    //pend the pendsv exception
    SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000790:	4b03      	ldr	r3, [pc, #12]	; (80007a0 <SysTick_Handler+0x1c>)
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	4a02      	ldr	r2, [pc, #8]	; (80007a0 <SysTick_Handler+0x1c>)
 8000796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800079a:	6053      	str	r3, [r2, #4]
}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	e000ed00 	.word	0xe000ed00

080007a4 <HardFault_Handler>:

//2. implement the fault handlers
void HardFault_Handler(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
	printf("Exception : Hardfault\n");
 80007a8:	4801      	ldr	r0, [pc, #4]	; (80007b0 <HardFault_Handler+0xc>)
 80007aa:	f000 fa23 	bl	8000bf4 <puts>
	while(1);
 80007ae:	e7fe      	b.n	80007ae <HardFault_Handler+0xa>
 80007b0:	08001338 	.word	0x08001338

080007b4 <MemManage_Handler>:
}


void MemManage_Handler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	printf("Exception : MemManage\n");
 80007b8:	4801      	ldr	r0, [pc, #4]	; (80007c0 <MemManage_Handler+0xc>)
 80007ba:	f000 fa1b 	bl	8000bf4 <puts>
	while(1);
 80007be:	e7fe      	b.n	80007be <MemManage_Handler+0xa>
 80007c0:	08001350 	.word	0x08001350

080007c4 <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	printf("Exception : BusFault\n");
 80007c8:	4801      	ldr	r0, [pc, #4]	; (80007d0 <BusFault_Handler+0xc>)
 80007ca:	f000 fa13 	bl	8000bf4 <puts>
	while(1);
 80007ce:	e7fe      	b.n	80007ce <BusFault_Handler+0xa>
 80007d0:	08001368 	.word	0x08001368

080007d4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80007de:	4b0f      	ldr	r3, [pc, #60]	; (800081c <ITM_SendChar+0x48>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a0e      	ldr	r2, [pc, #56]	; (800081c <ITM_SendChar+0x48>)
 80007e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007e8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80007ea:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <ITM_SendChar+0x4c>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a0c      	ldr	r2, [pc, #48]	; (8000820 <ITM_SendChar+0x4c>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80007f6:	bf00      	nop
 80007f8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	2b00      	cmp	r3, #0
 8000804:	d0f8      	beq.n	80007f8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000806:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	6013      	str	r3, [r2, #0]
}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	e000edfc 	.word	0xe000edfc
 8000820:	e0000e00 	.word	0xe0000e00

08000824 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af00      	add	r7, sp, #0
 800082a:	60f8      	str	r0, [r7, #12]
 800082c:	60b9      	str	r1, [r7, #8]
 800082e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
 8000834:	e00a      	b.n	800084c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000836:	f3af 8000 	nop.w
 800083a:	4601      	mov	r1, r0
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	1c5a      	adds	r2, r3, #1
 8000840:	60ba      	str	r2, [r7, #8]
 8000842:	b2ca      	uxtb	r2, r1
 8000844:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	3301      	adds	r3, #1
 800084a:	617b      	str	r3, [r7, #20]
 800084c:	697a      	ldr	r2, [r7, #20]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	429a      	cmp	r2, r3
 8000852:	dbf0      	blt.n	8000836 <_read+0x12>
	}

return len;
 8000854:	687b      	ldr	r3, [r7, #4]
}
 8000856:	4618      	mov	r0, r3
 8000858:	3718      	adds	r7, #24
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800085e:	b580      	push	{r7, lr}
 8000860:	b086      	sub	sp, #24
 8000862:	af00      	add	r7, sp, #0
 8000864:	60f8      	str	r0, [r7, #12]
 8000866:	60b9      	str	r1, [r7, #8]
 8000868:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800086a:	2300      	movs	r3, #0
 800086c:	617b      	str	r3, [r7, #20]
 800086e:	e009      	b.n	8000884 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	1c5a      	adds	r2, r3, #1
 8000874:	60ba      	str	r2, [r7, #8]
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff ffab 	bl	80007d4 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	3301      	adds	r3, #1
 8000882:	617b      	str	r3, [r7, #20]
 8000884:	697a      	ldr	r2, [r7, #20]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	429a      	cmp	r2, r3
 800088a:	dbf1      	blt.n	8000870 <_write+0x12>
	}
	return len;
 800088c:	687b      	ldr	r3, [r7, #4]
}
 800088e:	4618      	mov	r0, r3
 8000890:	3718      	adds	r7, #24
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <_close>:

int _close(int file)
{
 8000896:	b480      	push	{r7}
 8000898:	b083      	sub	sp, #12
 800089a:	af00      	add	r7, sp, #0
 800089c:	6078      	str	r0, [r7, #4]
	return -1;
 800089e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	370c      	adds	r7, #12
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr

080008ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008ae:	b480      	push	{r7}
 80008b0:	b083      	sub	sp, #12
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	6078      	str	r0, [r7, #4]
 80008b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008be:	605a      	str	r2, [r3, #4]
	return 0;
 80008c0:	2300      	movs	r3, #0
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr

080008ce <_isatty>:

int _isatty(int file)
{
 80008ce:	b480      	push	{r7}
 80008d0:	b083      	sub	sp, #12
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
	return 1;
 80008d6:	2301      	movs	r3, #1
}
 80008d8:	4618      	mov	r0, r3
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b085      	sub	sp, #20
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	607a      	str	r2, [r7, #4]
	return 0;
 80008f0:	2300      	movs	r3, #0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3714      	adds	r7, #20
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
	...

08000900 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000908:	4b11      	ldr	r3, [pc, #68]	; (8000950 <_sbrk+0x50>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d102      	bne.n	8000916 <_sbrk+0x16>
		heap_end = &end;
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <_sbrk+0x50>)
 8000912:	4a10      	ldr	r2, [pc, #64]	; (8000954 <_sbrk+0x54>)
 8000914:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <_sbrk+0x50>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <_sbrk+0x50>)
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	4413      	add	r3, r2
 8000924:	466a      	mov	r2, sp
 8000926:	4293      	cmp	r3, r2
 8000928:	d907      	bls.n	800093a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800092a:	f000 fa91 	bl	8000e50 <__errno>
 800092e:	4603      	mov	r3, r0
 8000930:	220c      	movs	r2, #12
 8000932:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000934:	f04f 33ff 	mov.w	r3, #4294967295
 8000938:	e006      	b.n	8000948 <_sbrk+0x48>
	}

	heap_end += incr;
 800093a:	4b05      	ldr	r3, [pc, #20]	; (8000950 <_sbrk+0x50>)
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4413      	add	r3, r2
 8000942:	4a03      	ldr	r2, [pc, #12]	; (8000950 <_sbrk+0x50>)
 8000944:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000946:	68fb      	ldr	r3, [r7, #12]
}
 8000948:	4618      	mov	r0, r3
 800094a:	3710      	adds	r7, #16
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	200000e8 	.word	0x200000e8
 8000954:	20000238 	.word	0x20000238

08000958 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000958:	480d      	ldr	r0, [pc, #52]	; (8000990 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800095a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800095c:	480d      	ldr	r0, [pc, #52]	; (8000994 <LoopForever+0x6>)
  ldr r1, =_edata
 800095e:	490e      	ldr	r1, [pc, #56]	; (8000998 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000960:	4a0e      	ldr	r2, [pc, #56]	; (800099c <LoopForever+0xe>)
  movs r3, #0
 8000962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000964:	e002      	b.n	800096c <LoopCopyDataInit>

08000966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800096a:	3304      	adds	r3, #4

0800096c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800096c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800096e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000970:	d3f9      	bcc.n	8000966 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000972:	4a0b      	ldr	r2, [pc, #44]	; (80009a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000974:	4c0b      	ldr	r4, [pc, #44]	; (80009a4 <LoopForever+0x16>)
  movs r3, #0
 8000976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000978:	e001      	b.n	800097e <LoopFillZerobss>

0800097a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800097a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800097c:	3204      	adds	r2, #4

0800097e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800097e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000980:	d3fb      	bcc.n	800097a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000982:	f000 f813 	bl	80009ac <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000986:	f000 fa69 	bl	8000e5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800098a:	f7ff fccd 	bl	8000328 <main>

0800098e <LoopForever>:

LoopForever:
    b LoopForever
 800098e:	e7fe      	b.n	800098e <LoopForever>
  ldr   r0, =_estack
 8000990:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000998:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800099c:	08001388 	.word	0x08001388
  ldr r2, =_sbss
 80009a0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80009a4:	20000238 	.word	0x20000238

080009a8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009a8:	e7fe      	b.n	80009a8 <ADC_IRQHandler>
	...

080009ac <SystemInit>:
         after user changed register sittings. */
  SystemCoreClock = SYSTEM_CLOCK;
}

void SystemInit (void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
/* ToDo: add code to initialize the system
         do not use global variables because this function is called before
         reaching pre-main. RW section maybe overwritten afterwards. */
  SystemCoreClock = SYSTEM_CLOCK;
 80009b0:	4b03      	ldr	r3, [pc, #12]	; (80009c0 <SystemInit+0x14>)
 80009b2:	4a04      	ldr	r2, [pc, #16]	; (80009c4 <SystemInit+0x18>)
 80009b4:	601a      	str	r2, [r3, #0]
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	20000004 	.word	0x20000004
 80009c4:	03938700 	.word	0x03938700

080009c8 <std>:
 80009c8:	2300      	movs	r3, #0
 80009ca:	b510      	push	{r4, lr}
 80009cc:	4604      	mov	r4, r0
 80009ce:	e9c0 3300 	strd	r3, r3, [r0]
 80009d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80009d6:	6083      	str	r3, [r0, #8]
 80009d8:	8181      	strh	r1, [r0, #12]
 80009da:	6643      	str	r3, [r0, #100]	; 0x64
 80009dc:	81c2      	strh	r2, [r0, #14]
 80009de:	6183      	str	r3, [r0, #24]
 80009e0:	4619      	mov	r1, r3
 80009e2:	2208      	movs	r2, #8
 80009e4:	305c      	adds	r0, #92	; 0x5c
 80009e6:	f000 f9e5 	bl	8000db4 <memset>
 80009ea:	4b0d      	ldr	r3, [pc, #52]	; (8000a20 <std+0x58>)
 80009ec:	6263      	str	r3, [r4, #36]	; 0x24
 80009ee:	4b0d      	ldr	r3, [pc, #52]	; (8000a24 <std+0x5c>)
 80009f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80009f2:	4b0d      	ldr	r3, [pc, #52]	; (8000a28 <std+0x60>)
 80009f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80009f6:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <std+0x64>)
 80009f8:	6323      	str	r3, [r4, #48]	; 0x30
 80009fa:	4b0d      	ldr	r3, [pc, #52]	; (8000a30 <std+0x68>)
 80009fc:	6224      	str	r4, [r4, #32]
 80009fe:	429c      	cmp	r4, r3
 8000a00:	d006      	beq.n	8000a10 <std+0x48>
 8000a02:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8000a06:	4294      	cmp	r4, r2
 8000a08:	d002      	beq.n	8000a10 <std+0x48>
 8000a0a:	33d0      	adds	r3, #208	; 0xd0
 8000a0c:	429c      	cmp	r4, r3
 8000a0e:	d105      	bne.n	8000a1c <std+0x54>
 8000a10:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a18:	f000 ba44 	b.w	8000ea4 <__retarget_lock_init_recursive>
 8000a1c:	bd10      	pop	{r4, pc}
 8000a1e:	bf00      	nop
 8000a20:	08000c05 	.word	0x08000c05
 8000a24:	08000c27 	.word	0x08000c27
 8000a28:	08000c5f 	.word	0x08000c5f
 8000a2c:	08000c83 	.word	0x08000c83
 8000a30:	200000ec 	.word	0x200000ec

08000a34 <stdio_exit_handler>:
 8000a34:	4a02      	ldr	r2, [pc, #8]	; (8000a40 <stdio_exit_handler+0xc>)
 8000a36:	4903      	ldr	r1, [pc, #12]	; (8000a44 <stdio_exit_handler+0x10>)
 8000a38:	4803      	ldr	r0, [pc, #12]	; (8000a48 <stdio_exit_handler+0x14>)
 8000a3a:	f000 b869 	b.w	8000b10 <_fwalk_sglue>
 8000a3e:	bf00      	nop
 8000a40:	20000008 	.word	0x20000008
 8000a44:	080011a9 	.word	0x080011a9
 8000a48:	20000014 	.word	0x20000014

08000a4c <cleanup_stdio>:
 8000a4c:	6841      	ldr	r1, [r0, #4]
 8000a4e:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <cleanup_stdio+0x34>)
 8000a50:	4299      	cmp	r1, r3
 8000a52:	b510      	push	{r4, lr}
 8000a54:	4604      	mov	r4, r0
 8000a56:	d001      	beq.n	8000a5c <cleanup_stdio+0x10>
 8000a58:	f000 fba6 	bl	80011a8 <_fflush_r>
 8000a5c:	68a1      	ldr	r1, [r4, #8]
 8000a5e:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <cleanup_stdio+0x38>)
 8000a60:	4299      	cmp	r1, r3
 8000a62:	d002      	beq.n	8000a6a <cleanup_stdio+0x1e>
 8000a64:	4620      	mov	r0, r4
 8000a66:	f000 fb9f 	bl	80011a8 <_fflush_r>
 8000a6a:	68e1      	ldr	r1, [r4, #12]
 8000a6c:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <cleanup_stdio+0x3c>)
 8000a6e:	4299      	cmp	r1, r3
 8000a70:	d004      	beq.n	8000a7c <cleanup_stdio+0x30>
 8000a72:	4620      	mov	r0, r4
 8000a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a78:	f000 bb96 	b.w	80011a8 <_fflush_r>
 8000a7c:	bd10      	pop	{r4, pc}
 8000a7e:	bf00      	nop
 8000a80:	200000ec 	.word	0x200000ec
 8000a84:	20000154 	.word	0x20000154
 8000a88:	200001bc 	.word	0x200001bc

08000a8c <global_stdio_init.part.0>:
 8000a8c:	b510      	push	{r4, lr}
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <global_stdio_init.part.0+0x30>)
 8000a90:	4c0b      	ldr	r4, [pc, #44]	; (8000ac0 <global_stdio_init.part.0+0x34>)
 8000a92:	4a0c      	ldr	r2, [pc, #48]	; (8000ac4 <global_stdio_init.part.0+0x38>)
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	4620      	mov	r0, r4
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2104      	movs	r1, #4
 8000a9c:	f7ff ff94 	bl	80009c8 <std>
 8000aa0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	2109      	movs	r1, #9
 8000aa8:	f7ff ff8e 	bl	80009c8 <std>
 8000aac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000ab0:	2202      	movs	r2, #2
 8000ab2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ab6:	2112      	movs	r1, #18
 8000ab8:	f7ff bf86 	b.w	80009c8 <std>
 8000abc:	20000224 	.word	0x20000224
 8000ac0:	200000ec 	.word	0x200000ec
 8000ac4:	08000a35 	.word	0x08000a35

08000ac8 <__sfp_lock_acquire>:
 8000ac8:	4801      	ldr	r0, [pc, #4]	; (8000ad0 <__sfp_lock_acquire+0x8>)
 8000aca:	f000 b9ec 	b.w	8000ea6 <__retarget_lock_acquire_recursive>
 8000ace:	bf00      	nop
 8000ad0:	2000022d 	.word	0x2000022d

08000ad4 <__sfp_lock_release>:
 8000ad4:	4801      	ldr	r0, [pc, #4]	; (8000adc <__sfp_lock_release+0x8>)
 8000ad6:	f000 b9e7 	b.w	8000ea8 <__retarget_lock_release_recursive>
 8000ada:	bf00      	nop
 8000adc:	2000022d 	.word	0x2000022d

08000ae0 <__sinit>:
 8000ae0:	b510      	push	{r4, lr}
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	f7ff fff0 	bl	8000ac8 <__sfp_lock_acquire>
 8000ae8:	6a23      	ldr	r3, [r4, #32]
 8000aea:	b11b      	cbz	r3, 8000af4 <__sinit+0x14>
 8000aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000af0:	f7ff bff0 	b.w	8000ad4 <__sfp_lock_release>
 8000af4:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <__sinit+0x28>)
 8000af6:	6223      	str	r3, [r4, #32]
 8000af8:	4b04      	ldr	r3, [pc, #16]	; (8000b0c <__sinit+0x2c>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d1f5      	bne.n	8000aec <__sinit+0xc>
 8000b00:	f7ff ffc4 	bl	8000a8c <global_stdio_init.part.0>
 8000b04:	e7f2      	b.n	8000aec <__sinit+0xc>
 8000b06:	bf00      	nop
 8000b08:	08000a4d 	.word	0x08000a4d
 8000b0c:	20000224 	.word	0x20000224

08000b10 <_fwalk_sglue>:
 8000b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b14:	4607      	mov	r7, r0
 8000b16:	4688      	mov	r8, r1
 8000b18:	4614      	mov	r4, r2
 8000b1a:	2600      	movs	r6, #0
 8000b1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000b20:	f1b9 0901 	subs.w	r9, r9, #1
 8000b24:	d505      	bpl.n	8000b32 <_fwalk_sglue+0x22>
 8000b26:	6824      	ldr	r4, [r4, #0]
 8000b28:	2c00      	cmp	r4, #0
 8000b2a:	d1f7      	bne.n	8000b1c <_fwalk_sglue+0xc>
 8000b2c:	4630      	mov	r0, r6
 8000b2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b32:	89ab      	ldrh	r3, [r5, #12]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d907      	bls.n	8000b48 <_fwalk_sglue+0x38>
 8000b38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	d003      	beq.n	8000b48 <_fwalk_sglue+0x38>
 8000b40:	4629      	mov	r1, r5
 8000b42:	4638      	mov	r0, r7
 8000b44:	47c0      	blx	r8
 8000b46:	4306      	orrs	r6, r0
 8000b48:	3568      	adds	r5, #104	; 0x68
 8000b4a:	e7e9      	b.n	8000b20 <_fwalk_sglue+0x10>

08000b4c <_puts_r>:
 8000b4c:	6a03      	ldr	r3, [r0, #32]
 8000b4e:	b570      	push	{r4, r5, r6, lr}
 8000b50:	6884      	ldr	r4, [r0, #8]
 8000b52:	4605      	mov	r5, r0
 8000b54:	460e      	mov	r6, r1
 8000b56:	b90b      	cbnz	r3, 8000b5c <_puts_r+0x10>
 8000b58:	f7ff ffc2 	bl	8000ae0 <__sinit>
 8000b5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000b5e:	07db      	lsls	r3, r3, #31
 8000b60:	d405      	bmi.n	8000b6e <_puts_r+0x22>
 8000b62:	89a3      	ldrh	r3, [r4, #12]
 8000b64:	0598      	lsls	r0, r3, #22
 8000b66:	d402      	bmi.n	8000b6e <_puts_r+0x22>
 8000b68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b6a:	f000 f99c 	bl	8000ea6 <__retarget_lock_acquire_recursive>
 8000b6e:	89a3      	ldrh	r3, [r4, #12]
 8000b70:	0719      	lsls	r1, r3, #28
 8000b72:	d513      	bpl.n	8000b9c <_puts_r+0x50>
 8000b74:	6923      	ldr	r3, [r4, #16]
 8000b76:	b18b      	cbz	r3, 8000b9c <_puts_r+0x50>
 8000b78:	3e01      	subs	r6, #1
 8000b7a:	68a3      	ldr	r3, [r4, #8]
 8000b7c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000b80:	3b01      	subs	r3, #1
 8000b82:	60a3      	str	r3, [r4, #8]
 8000b84:	b9e9      	cbnz	r1, 8000bc2 <_puts_r+0x76>
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	da2e      	bge.n	8000be8 <_puts_r+0x9c>
 8000b8a:	4622      	mov	r2, r4
 8000b8c:	210a      	movs	r1, #10
 8000b8e:	4628      	mov	r0, r5
 8000b90:	f000 f87b 	bl	8000c8a <__swbuf_r>
 8000b94:	3001      	adds	r0, #1
 8000b96:	d007      	beq.n	8000ba8 <_puts_r+0x5c>
 8000b98:	250a      	movs	r5, #10
 8000b9a:	e007      	b.n	8000bac <_puts_r+0x60>
 8000b9c:	4621      	mov	r1, r4
 8000b9e:	4628      	mov	r0, r5
 8000ba0:	f000 f8b0 	bl	8000d04 <__swsetup_r>
 8000ba4:	2800      	cmp	r0, #0
 8000ba6:	d0e7      	beq.n	8000b78 <_puts_r+0x2c>
 8000ba8:	f04f 35ff 	mov.w	r5, #4294967295
 8000bac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000bae:	07da      	lsls	r2, r3, #31
 8000bb0:	d405      	bmi.n	8000bbe <_puts_r+0x72>
 8000bb2:	89a3      	ldrh	r3, [r4, #12]
 8000bb4:	059b      	lsls	r3, r3, #22
 8000bb6:	d402      	bmi.n	8000bbe <_puts_r+0x72>
 8000bb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000bba:	f000 f975 	bl	8000ea8 <__retarget_lock_release_recursive>
 8000bbe:	4628      	mov	r0, r5
 8000bc0:	bd70      	pop	{r4, r5, r6, pc}
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	da04      	bge.n	8000bd0 <_puts_r+0x84>
 8000bc6:	69a2      	ldr	r2, [r4, #24]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	dc06      	bgt.n	8000bda <_puts_r+0x8e>
 8000bcc:	290a      	cmp	r1, #10
 8000bce:	d004      	beq.n	8000bda <_puts_r+0x8e>
 8000bd0:	6823      	ldr	r3, [r4, #0]
 8000bd2:	1c5a      	adds	r2, r3, #1
 8000bd4:	6022      	str	r2, [r4, #0]
 8000bd6:	7019      	strb	r1, [r3, #0]
 8000bd8:	e7cf      	b.n	8000b7a <_puts_r+0x2e>
 8000bda:	4622      	mov	r2, r4
 8000bdc:	4628      	mov	r0, r5
 8000bde:	f000 f854 	bl	8000c8a <__swbuf_r>
 8000be2:	3001      	adds	r0, #1
 8000be4:	d1c9      	bne.n	8000b7a <_puts_r+0x2e>
 8000be6:	e7df      	b.n	8000ba8 <_puts_r+0x5c>
 8000be8:	6823      	ldr	r3, [r4, #0]
 8000bea:	250a      	movs	r5, #10
 8000bec:	1c5a      	adds	r2, r3, #1
 8000bee:	6022      	str	r2, [r4, #0]
 8000bf0:	701d      	strb	r5, [r3, #0]
 8000bf2:	e7db      	b.n	8000bac <_puts_r+0x60>

08000bf4 <puts>:
 8000bf4:	4b02      	ldr	r3, [pc, #8]	; (8000c00 <puts+0xc>)
 8000bf6:	4601      	mov	r1, r0
 8000bf8:	6818      	ldr	r0, [r3, #0]
 8000bfa:	f7ff bfa7 	b.w	8000b4c <_puts_r>
 8000bfe:	bf00      	nop
 8000c00:	20000060 	.word	0x20000060

08000c04 <__sread>:
 8000c04:	b510      	push	{r4, lr}
 8000c06:	460c      	mov	r4, r1
 8000c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c0c:	f000 f8fc 	bl	8000e08 <_read_r>
 8000c10:	2800      	cmp	r0, #0
 8000c12:	bfab      	itete	ge
 8000c14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000c16:	89a3      	ldrhlt	r3, [r4, #12]
 8000c18:	181b      	addge	r3, r3, r0
 8000c1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000c1e:	bfac      	ite	ge
 8000c20:	6563      	strge	r3, [r4, #84]	; 0x54
 8000c22:	81a3      	strhlt	r3, [r4, #12]
 8000c24:	bd10      	pop	{r4, pc}

08000c26 <__swrite>:
 8000c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c2a:	461f      	mov	r7, r3
 8000c2c:	898b      	ldrh	r3, [r1, #12]
 8000c2e:	05db      	lsls	r3, r3, #23
 8000c30:	4605      	mov	r5, r0
 8000c32:	460c      	mov	r4, r1
 8000c34:	4616      	mov	r6, r2
 8000c36:	d505      	bpl.n	8000c44 <__swrite+0x1e>
 8000c38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f000 f8d0 	bl	8000de4 <_lseek_r>
 8000c44:	89a3      	ldrh	r3, [r4, #12]
 8000c46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000c4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000c4e:	81a3      	strh	r3, [r4, #12]
 8000c50:	4632      	mov	r2, r6
 8000c52:	463b      	mov	r3, r7
 8000c54:	4628      	mov	r0, r5
 8000c56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000c5a:	f000 b8e7 	b.w	8000e2c <_write_r>

08000c5e <__sseek>:
 8000c5e:	b510      	push	{r4, lr}
 8000c60:	460c      	mov	r4, r1
 8000c62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c66:	f000 f8bd 	bl	8000de4 <_lseek_r>
 8000c6a:	1c43      	adds	r3, r0, #1
 8000c6c:	89a3      	ldrh	r3, [r4, #12]
 8000c6e:	bf15      	itete	ne
 8000c70:	6560      	strne	r0, [r4, #84]	; 0x54
 8000c72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000c76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000c7a:	81a3      	strheq	r3, [r4, #12]
 8000c7c:	bf18      	it	ne
 8000c7e:	81a3      	strhne	r3, [r4, #12]
 8000c80:	bd10      	pop	{r4, pc}

08000c82 <__sclose>:
 8000c82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c86:	f000 b89d 	b.w	8000dc4 <_close_r>

08000c8a <__swbuf_r>:
 8000c8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c8c:	460e      	mov	r6, r1
 8000c8e:	4614      	mov	r4, r2
 8000c90:	4605      	mov	r5, r0
 8000c92:	b118      	cbz	r0, 8000c9c <__swbuf_r+0x12>
 8000c94:	6a03      	ldr	r3, [r0, #32]
 8000c96:	b90b      	cbnz	r3, 8000c9c <__swbuf_r+0x12>
 8000c98:	f7ff ff22 	bl	8000ae0 <__sinit>
 8000c9c:	69a3      	ldr	r3, [r4, #24]
 8000c9e:	60a3      	str	r3, [r4, #8]
 8000ca0:	89a3      	ldrh	r3, [r4, #12]
 8000ca2:	071a      	lsls	r2, r3, #28
 8000ca4:	d525      	bpl.n	8000cf2 <__swbuf_r+0x68>
 8000ca6:	6923      	ldr	r3, [r4, #16]
 8000ca8:	b31b      	cbz	r3, 8000cf2 <__swbuf_r+0x68>
 8000caa:	6823      	ldr	r3, [r4, #0]
 8000cac:	6922      	ldr	r2, [r4, #16]
 8000cae:	1a98      	subs	r0, r3, r2
 8000cb0:	6963      	ldr	r3, [r4, #20]
 8000cb2:	b2f6      	uxtb	r6, r6
 8000cb4:	4283      	cmp	r3, r0
 8000cb6:	4637      	mov	r7, r6
 8000cb8:	dc04      	bgt.n	8000cc4 <__swbuf_r+0x3a>
 8000cba:	4621      	mov	r1, r4
 8000cbc:	4628      	mov	r0, r5
 8000cbe:	f000 fa73 	bl	80011a8 <_fflush_r>
 8000cc2:	b9e0      	cbnz	r0, 8000cfe <__swbuf_r+0x74>
 8000cc4:	68a3      	ldr	r3, [r4, #8]
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	60a3      	str	r3, [r4, #8]
 8000cca:	6823      	ldr	r3, [r4, #0]
 8000ccc:	1c5a      	adds	r2, r3, #1
 8000cce:	6022      	str	r2, [r4, #0]
 8000cd0:	701e      	strb	r6, [r3, #0]
 8000cd2:	6962      	ldr	r2, [r4, #20]
 8000cd4:	1c43      	adds	r3, r0, #1
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	d004      	beq.n	8000ce4 <__swbuf_r+0x5a>
 8000cda:	89a3      	ldrh	r3, [r4, #12]
 8000cdc:	07db      	lsls	r3, r3, #31
 8000cde:	d506      	bpl.n	8000cee <__swbuf_r+0x64>
 8000ce0:	2e0a      	cmp	r6, #10
 8000ce2:	d104      	bne.n	8000cee <__swbuf_r+0x64>
 8000ce4:	4621      	mov	r1, r4
 8000ce6:	4628      	mov	r0, r5
 8000ce8:	f000 fa5e 	bl	80011a8 <_fflush_r>
 8000cec:	b938      	cbnz	r0, 8000cfe <__swbuf_r+0x74>
 8000cee:	4638      	mov	r0, r7
 8000cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cf2:	4621      	mov	r1, r4
 8000cf4:	4628      	mov	r0, r5
 8000cf6:	f000 f805 	bl	8000d04 <__swsetup_r>
 8000cfa:	2800      	cmp	r0, #0
 8000cfc:	d0d5      	beq.n	8000caa <__swbuf_r+0x20>
 8000cfe:	f04f 37ff 	mov.w	r7, #4294967295
 8000d02:	e7f4      	b.n	8000cee <__swbuf_r+0x64>

08000d04 <__swsetup_r>:
 8000d04:	b538      	push	{r3, r4, r5, lr}
 8000d06:	4b2a      	ldr	r3, [pc, #168]	; (8000db0 <__swsetup_r+0xac>)
 8000d08:	4605      	mov	r5, r0
 8000d0a:	6818      	ldr	r0, [r3, #0]
 8000d0c:	460c      	mov	r4, r1
 8000d0e:	b118      	cbz	r0, 8000d18 <__swsetup_r+0x14>
 8000d10:	6a03      	ldr	r3, [r0, #32]
 8000d12:	b90b      	cbnz	r3, 8000d18 <__swsetup_r+0x14>
 8000d14:	f7ff fee4 	bl	8000ae0 <__sinit>
 8000d18:	89a3      	ldrh	r3, [r4, #12]
 8000d1a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000d1e:	0718      	lsls	r0, r3, #28
 8000d20:	d422      	bmi.n	8000d68 <__swsetup_r+0x64>
 8000d22:	06d9      	lsls	r1, r3, #27
 8000d24:	d407      	bmi.n	8000d36 <__swsetup_r+0x32>
 8000d26:	2309      	movs	r3, #9
 8000d28:	602b      	str	r3, [r5, #0]
 8000d2a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000d2e:	81a3      	strh	r3, [r4, #12]
 8000d30:	f04f 30ff 	mov.w	r0, #4294967295
 8000d34:	e034      	b.n	8000da0 <__swsetup_r+0x9c>
 8000d36:	0758      	lsls	r0, r3, #29
 8000d38:	d512      	bpl.n	8000d60 <__swsetup_r+0x5c>
 8000d3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000d3c:	b141      	cbz	r1, 8000d50 <__swsetup_r+0x4c>
 8000d3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d002      	beq.n	8000d4c <__swsetup_r+0x48>
 8000d46:	4628      	mov	r0, r5
 8000d48:	f000 f8b0 	bl	8000eac <_free_r>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	6363      	str	r3, [r4, #52]	; 0x34
 8000d50:	89a3      	ldrh	r3, [r4, #12]
 8000d52:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000d56:	81a3      	strh	r3, [r4, #12]
 8000d58:	2300      	movs	r3, #0
 8000d5a:	6063      	str	r3, [r4, #4]
 8000d5c:	6923      	ldr	r3, [r4, #16]
 8000d5e:	6023      	str	r3, [r4, #0]
 8000d60:	89a3      	ldrh	r3, [r4, #12]
 8000d62:	f043 0308 	orr.w	r3, r3, #8
 8000d66:	81a3      	strh	r3, [r4, #12]
 8000d68:	6923      	ldr	r3, [r4, #16]
 8000d6a:	b94b      	cbnz	r3, 8000d80 <__swsetup_r+0x7c>
 8000d6c:	89a3      	ldrh	r3, [r4, #12]
 8000d6e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000d72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d76:	d003      	beq.n	8000d80 <__swsetup_r+0x7c>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	4628      	mov	r0, r5
 8000d7c:	f000 fa62 	bl	8001244 <__smakebuf_r>
 8000d80:	89a0      	ldrh	r0, [r4, #12]
 8000d82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000d86:	f010 0301 	ands.w	r3, r0, #1
 8000d8a:	d00a      	beq.n	8000da2 <__swsetup_r+0x9e>
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60a3      	str	r3, [r4, #8]
 8000d90:	6963      	ldr	r3, [r4, #20]
 8000d92:	425b      	negs	r3, r3
 8000d94:	61a3      	str	r3, [r4, #24]
 8000d96:	6923      	ldr	r3, [r4, #16]
 8000d98:	b943      	cbnz	r3, 8000dac <__swsetup_r+0xa8>
 8000d9a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000d9e:	d1c4      	bne.n	8000d2a <__swsetup_r+0x26>
 8000da0:	bd38      	pop	{r3, r4, r5, pc}
 8000da2:	0781      	lsls	r1, r0, #30
 8000da4:	bf58      	it	pl
 8000da6:	6963      	ldrpl	r3, [r4, #20]
 8000da8:	60a3      	str	r3, [r4, #8]
 8000daa:	e7f4      	b.n	8000d96 <__swsetup_r+0x92>
 8000dac:	2000      	movs	r0, #0
 8000dae:	e7f7      	b.n	8000da0 <__swsetup_r+0x9c>
 8000db0:	20000060 	.word	0x20000060

08000db4 <memset>:
 8000db4:	4402      	add	r2, r0
 8000db6:	4603      	mov	r3, r0
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d100      	bne.n	8000dbe <memset+0xa>
 8000dbc:	4770      	bx	lr
 8000dbe:	f803 1b01 	strb.w	r1, [r3], #1
 8000dc2:	e7f9      	b.n	8000db8 <memset+0x4>

08000dc4 <_close_r>:
 8000dc4:	b538      	push	{r3, r4, r5, lr}
 8000dc6:	4d06      	ldr	r5, [pc, #24]	; (8000de0 <_close_r+0x1c>)
 8000dc8:	2300      	movs	r3, #0
 8000dca:	4604      	mov	r4, r0
 8000dcc:	4608      	mov	r0, r1
 8000dce:	602b      	str	r3, [r5, #0]
 8000dd0:	f7ff fd61 	bl	8000896 <_close>
 8000dd4:	1c43      	adds	r3, r0, #1
 8000dd6:	d102      	bne.n	8000dde <_close_r+0x1a>
 8000dd8:	682b      	ldr	r3, [r5, #0]
 8000dda:	b103      	cbz	r3, 8000dde <_close_r+0x1a>
 8000ddc:	6023      	str	r3, [r4, #0]
 8000dde:	bd38      	pop	{r3, r4, r5, pc}
 8000de0:	20000228 	.word	0x20000228

08000de4 <_lseek_r>:
 8000de4:	b538      	push	{r3, r4, r5, lr}
 8000de6:	4d07      	ldr	r5, [pc, #28]	; (8000e04 <_lseek_r+0x20>)
 8000de8:	4604      	mov	r4, r0
 8000dea:	4608      	mov	r0, r1
 8000dec:	4611      	mov	r1, r2
 8000dee:	2200      	movs	r2, #0
 8000df0:	602a      	str	r2, [r5, #0]
 8000df2:	461a      	mov	r2, r3
 8000df4:	f7ff fd76 	bl	80008e4 <_lseek>
 8000df8:	1c43      	adds	r3, r0, #1
 8000dfa:	d102      	bne.n	8000e02 <_lseek_r+0x1e>
 8000dfc:	682b      	ldr	r3, [r5, #0]
 8000dfe:	b103      	cbz	r3, 8000e02 <_lseek_r+0x1e>
 8000e00:	6023      	str	r3, [r4, #0]
 8000e02:	bd38      	pop	{r3, r4, r5, pc}
 8000e04:	20000228 	.word	0x20000228

08000e08 <_read_r>:
 8000e08:	b538      	push	{r3, r4, r5, lr}
 8000e0a:	4d07      	ldr	r5, [pc, #28]	; (8000e28 <_read_r+0x20>)
 8000e0c:	4604      	mov	r4, r0
 8000e0e:	4608      	mov	r0, r1
 8000e10:	4611      	mov	r1, r2
 8000e12:	2200      	movs	r2, #0
 8000e14:	602a      	str	r2, [r5, #0]
 8000e16:	461a      	mov	r2, r3
 8000e18:	f7ff fd04 	bl	8000824 <_read>
 8000e1c:	1c43      	adds	r3, r0, #1
 8000e1e:	d102      	bne.n	8000e26 <_read_r+0x1e>
 8000e20:	682b      	ldr	r3, [r5, #0]
 8000e22:	b103      	cbz	r3, 8000e26 <_read_r+0x1e>
 8000e24:	6023      	str	r3, [r4, #0]
 8000e26:	bd38      	pop	{r3, r4, r5, pc}
 8000e28:	20000228 	.word	0x20000228

08000e2c <_write_r>:
 8000e2c:	b538      	push	{r3, r4, r5, lr}
 8000e2e:	4d07      	ldr	r5, [pc, #28]	; (8000e4c <_write_r+0x20>)
 8000e30:	4604      	mov	r4, r0
 8000e32:	4608      	mov	r0, r1
 8000e34:	4611      	mov	r1, r2
 8000e36:	2200      	movs	r2, #0
 8000e38:	602a      	str	r2, [r5, #0]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	f7ff fd0f 	bl	800085e <_write>
 8000e40:	1c43      	adds	r3, r0, #1
 8000e42:	d102      	bne.n	8000e4a <_write_r+0x1e>
 8000e44:	682b      	ldr	r3, [r5, #0]
 8000e46:	b103      	cbz	r3, 8000e4a <_write_r+0x1e>
 8000e48:	6023      	str	r3, [r4, #0]
 8000e4a:	bd38      	pop	{r3, r4, r5, pc}
 8000e4c:	20000228 	.word	0x20000228

08000e50 <__errno>:
 8000e50:	4b01      	ldr	r3, [pc, #4]	; (8000e58 <__errno+0x8>)
 8000e52:	6818      	ldr	r0, [r3, #0]
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	20000060 	.word	0x20000060

08000e5c <__libc_init_array>:
 8000e5c:	b570      	push	{r4, r5, r6, lr}
 8000e5e:	4d0d      	ldr	r5, [pc, #52]	; (8000e94 <__libc_init_array+0x38>)
 8000e60:	4c0d      	ldr	r4, [pc, #52]	; (8000e98 <__libc_init_array+0x3c>)
 8000e62:	1b64      	subs	r4, r4, r5
 8000e64:	10a4      	asrs	r4, r4, #2
 8000e66:	2600      	movs	r6, #0
 8000e68:	42a6      	cmp	r6, r4
 8000e6a:	d109      	bne.n	8000e80 <__libc_init_array+0x24>
 8000e6c:	4d0b      	ldr	r5, [pc, #44]	; (8000e9c <__libc_init_array+0x40>)
 8000e6e:	4c0c      	ldr	r4, [pc, #48]	; (8000ea0 <__libc_init_array+0x44>)
 8000e70:	f000 fa56 	bl	8001320 <_init>
 8000e74:	1b64      	subs	r4, r4, r5
 8000e76:	10a4      	asrs	r4, r4, #2
 8000e78:	2600      	movs	r6, #0
 8000e7a:	42a6      	cmp	r6, r4
 8000e7c:	d105      	bne.n	8000e8a <__libc_init_array+0x2e>
 8000e7e:	bd70      	pop	{r4, r5, r6, pc}
 8000e80:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e84:	4798      	blx	r3
 8000e86:	3601      	adds	r6, #1
 8000e88:	e7ee      	b.n	8000e68 <__libc_init_array+0xc>
 8000e8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e8e:	4798      	blx	r3
 8000e90:	3601      	adds	r6, #1
 8000e92:	e7f2      	b.n	8000e7a <__libc_init_array+0x1e>
 8000e94:	08001380 	.word	0x08001380
 8000e98:	08001380 	.word	0x08001380
 8000e9c:	08001380 	.word	0x08001380
 8000ea0:	08001384 	.word	0x08001384

08000ea4 <__retarget_lock_init_recursive>:
 8000ea4:	4770      	bx	lr

08000ea6 <__retarget_lock_acquire_recursive>:
 8000ea6:	4770      	bx	lr

08000ea8 <__retarget_lock_release_recursive>:
 8000ea8:	4770      	bx	lr
	...

08000eac <_free_r>:
 8000eac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000eae:	2900      	cmp	r1, #0
 8000eb0:	d044      	beq.n	8000f3c <_free_r+0x90>
 8000eb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000eb6:	9001      	str	r0, [sp, #4]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	f1a1 0404 	sub.w	r4, r1, #4
 8000ebe:	bfb8      	it	lt
 8000ec0:	18e4      	addlt	r4, r4, r3
 8000ec2:	f000 f8df 	bl	8001084 <__malloc_lock>
 8000ec6:	4a1e      	ldr	r2, [pc, #120]	; (8000f40 <_free_r+0x94>)
 8000ec8:	9801      	ldr	r0, [sp, #4]
 8000eca:	6813      	ldr	r3, [r2, #0]
 8000ecc:	b933      	cbnz	r3, 8000edc <_free_r+0x30>
 8000ece:	6063      	str	r3, [r4, #4]
 8000ed0:	6014      	str	r4, [r2, #0]
 8000ed2:	b003      	add	sp, #12
 8000ed4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000ed8:	f000 b8da 	b.w	8001090 <__malloc_unlock>
 8000edc:	42a3      	cmp	r3, r4
 8000ede:	d908      	bls.n	8000ef2 <_free_r+0x46>
 8000ee0:	6825      	ldr	r5, [r4, #0]
 8000ee2:	1961      	adds	r1, r4, r5
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf01      	itttt	eq
 8000ee8:	6819      	ldreq	r1, [r3, #0]
 8000eea:	685b      	ldreq	r3, [r3, #4]
 8000eec:	1949      	addeq	r1, r1, r5
 8000eee:	6021      	streq	r1, [r4, #0]
 8000ef0:	e7ed      	b.n	8000ece <_free_r+0x22>
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	b10b      	cbz	r3, 8000efc <_free_r+0x50>
 8000ef8:	42a3      	cmp	r3, r4
 8000efa:	d9fa      	bls.n	8000ef2 <_free_r+0x46>
 8000efc:	6811      	ldr	r1, [r2, #0]
 8000efe:	1855      	adds	r5, r2, r1
 8000f00:	42a5      	cmp	r5, r4
 8000f02:	d10b      	bne.n	8000f1c <_free_r+0x70>
 8000f04:	6824      	ldr	r4, [r4, #0]
 8000f06:	4421      	add	r1, r4
 8000f08:	1854      	adds	r4, r2, r1
 8000f0a:	42a3      	cmp	r3, r4
 8000f0c:	6011      	str	r1, [r2, #0]
 8000f0e:	d1e0      	bne.n	8000ed2 <_free_r+0x26>
 8000f10:	681c      	ldr	r4, [r3, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	6053      	str	r3, [r2, #4]
 8000f16:	440c      	add	r4, r1
 8000f18:	6014      	str	r4, [r2, #0]
 8000f1a:	e7da      	b.n	8000ed2 <_free_r+0x26>
 8000f1c:	d902      	bls.n	8000f24 <_free_r+0x78>
 8000f1e:	230c      	movs	r3, #12
 8000f20:	6003      	str	r3, [r0, #0]
 8000f22:	e7d6      	b.n	8000ed2 <_free_r+0x26>
 8000f24:	6825      	ldr	r5, [r4, #0]
 8000f26:	1961      	adds	r1, r4, r5
 8000f28:	428b      	cmp	r3, r1
 8000f2a:	bf04      	itt	eq
 8000f2c:	6819      	ldreq	r1, [r3, #0]
 8000f2e:	685b      	ldreq	r3, [r3, #4]
 8000f30:	6063      	str	r3, [r4, #4]
 8000f32:	bf04      	itt	eq
 8000f34:	1949      	addeq	r1, r1, r5
 8000f36:	6021      	streq	r1, [r4, #0]
 8000f38:	6054      	str	r4, [r2, #4]
 8000f3a:	e7ca      	b.n	8000ed2 <_free_r+0x26>
 8000f3c:	b003      	add	sp, #12
 8000f3e:	bd30      	pop	{r4, r5, pc}
 8000f40:	20000230 	.word	0x20000230

08000f44 <sbrk_aligned>:
 8000f44:	b570      	push	{r4, r5, r6, lr}
 8000f46:	4e0e      	ldr	r6, [pc, #56]	; (8000f80 <sbrk_aligned+0x3c>)
 8000f48:	460c      	mov	r4, r1
 8000f4a:	6831      	ldr	r1, [r6, #0]
 8000f4c:	4605      	mov	r5, r0
 8000f4e:	b911      	cbnz	r1, 8000f56 <sbrk_aligned+0x12>
 8000f50:	f000 f9d6 	bl	8001300 <_sbrk_r>
 8000f54:	6030      	str	r0, [r6, #0]
 8000f56:	4621      	mov	r1, r4
 8000f58:	4628      	mov	r0, r5
 8000f5a:	f000 f9d1 	bl	8001300 <_sbrk_r>
 8000f5e:	1c43      	adds	r3, r0, #1
 8000f60:	d00a      	beq.n	8000f78 <sbrk_aligned+0x34>
 8000f62:	1cc4      	adds	r4, r0, #3
 8000f64:	f024 0403 	bic.w	r4, r4, #3
 8000f68:	42a0      	cmp	r0, r4
 8000f6a:	d007      	beq.n	8000f7c <sbrk_aligned+0x38>
 8000f6c:	1a21      	subs	r1, r4, r0
 8000f6e:	4628      	mov	r0, r5
 8000f70:	f000 f9c6 	bl	8001300 <_sbrk_r>
 8000f74:	3001      	adds	r0, #1
 8000f76:	d101      	bne.n	8000f7c <sbrk_aligned+0x38>
 8000f78:	f04f 34ff 	mov.w	r4, #4294967295
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	bd70      	pop	{r4, r5, r6, pc}
 8000f80:	20000234 	.word	0x20000234

08000f84 <_malloc_r>:
 8000f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f88:	1ccd      	adds	r5, r1, #3
 8000f8a:	f025 0503 	bic.w	r5, r5, #3
 8000f8e:	3508      	adds	r5, #8
 8000f90:	2d0c      	cmp	r5, #12
 8000f92:	bf38      	it	cc
 8000f94:	250c      	movcc	r5, #12
 8000f96:	2d00      	cmp	r5, #0
 8000f98:	4607      	mov	r7, r0
 8000f9a:	db01      	blt.n	8000fa0 <_malloc_r+0x1c>
 8000f9c:	42a9      	cmp	r1, r5
 8000f9e:	d905      	bls.n	8000fac <_malloc_r+0x28>
 8000fa0:	230c      	movs	r3, #12
 8000fa2:	603b      	str	r3, [r7, #0]
 8000fa4:	2600      	movs	r6, #0
 8000fa6:	4630      	mov	r0, r6
 8000fa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000fac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001080 <_malloc_r+0xfc>
 8000fb0:	f000 f868 	bl	8001084 <__malloc_lock>
 8000fb4:	f8d8 3000 	ldr.w	r3, [r8]
 8000fb8:	461c      	mov	r4, r3
 8000fba:	bb5c      	cbnz	r4, 8001014 <_malloc_r+0x90>
 8000fbc:	4629      	mov	r1, r5
 8000fbe:	4638      	mov	r0, r7
 8000fc0:	f7ff ffc0 	bl	8000f44 <sbrk_aligned>
 8000fc4:	1c43      	adds	r3, r0, #1
 8000fc6:	4604      	mov	r4, r0
 8000fc8:	d155      	bne.n	8001076 <_malloc_r+0xf2>
 8000fca:	f8d8 4000 	ldr.w	r4, [r8]
 8000fce:	4626      	mov	r6, r4
 8000fd0:	2e00      	cmp	r6, #0
 8000fd2:	d145      	bne.n	8001060 <_malloc_r+0xdc>
 8000fd4:	2c00      	cmp	r4, #0
 8000fd6:	d048      	beq.n	800106a <_malloc_r+0xe6>
 8000fd8:	6823      	ldr	r3, [r4, #0]
 8000fda:	4631      	mov	r1, r6
 8000fdc:	4638      	mov	r0, r7
 8000fde:	eb04 0903 	add.w	r9, r4, r3
 8000fe2:	f000 f98d 	bl	8001300 <_sbrk_r>
 8000fe6:	4581      	cmp	r9, r0
 8000fe8:	d13f      	bne.n	800106a <_malloc_r+0xe6>
 8000fea:	6821      	ldr	r1, [r4, #0]
 8000fec:	1a6d      	subs	r5, r5, r1
 8000fee:	4629      	mov	r1, r5
 8000ff0:	4638      	mov	r0, r7
 8000ff2:	f7ff ffa7 	bl	8000f44 <sbrk_aligned>
 8000ff6:	3001      	adds	r0, #1
 8000ff8:	d037      	beq.n	800106a <_malloc_r+0xe6>
 8000ffa:	6823      	ldr	r3, [r4, #0]
 8000ffc:	442b      	add	r3, r5
 8000ffe:	6023      	str	r3, [r4, #0]
 8001000:	f8d8 3000 	ldr.w	r3, [r8]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d038      	beq.n	800107a <_malloc_r+0xf6>
 8001008:	685a      	ldr	r2, [r3, #4]
 800100a:	42a2      	cmp	r2, r4
 800100c:	d12b      	bne.n	8001066 <_malloc_r+0xe2>
 800100e:	2200      	movs	r2, #0
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	e00f      	b.n	8001034 <_malloc_r+0xb0>
 8001014:	6822      	ldr	r2, [r4, #0]
 8001016:	1b52      	subs	r2, r2, r5
 8001018:	d41f      	bmi.n	800105a <_malloc_r+0xd6>
 800101a:	2a0b      	cmp	r2, #11
 800101c:	d917      	bls.n	800104e <_malloc_r+0xca>
 800101e:	1961      	adds	r1, r4, r5
 8001020:	42a3      	cmp	r3, r4
 8001022:	6025      	str	r5, [r4, #0]
 8001024:	bf18      	it	ne
 8001026:	6059      	strne	r1, [r3, #4]
 8001028:	6863      	ldr	r3, [r4, #4]
 800102a:	bf08      	it	eq
 800102c:	f8c8 1000 	streq.w	r1, [r8]
 8001030:	5162      	str	r2, [r4, r5]
 8001032:	604b      	str	r3, [r1, #4]
 8001034:	4638      	mov	r0, r7
 8001036:	f104 060b 	add.w	r6, r4, #11
 800103a:	f000 f829 	bl	8001090 <__malloc_unlock>
 800103e:	f026 0607 	bic.w	r6, r6, #7
 8001042:	1d23      	adds	r3, r4, #4
 8001044:	1af2      	subs	r2, r6, r3
 8001046:	d0ae      	beq.n	8000fa6 <_malloc_r+0x22>
 8001048:	1b9b      	subs	r3, r3, r6
 800104a:	50a3      	str	r3, [r4, r2]
 800104c:	e7ab      	b.n	8000fa6 <_malloc_r+0x22>
 800104e:	42a3      	cmp	r3, r4
 8001050:	6862      	ldr	r2, [r4, #4]
 8001052:	d1dd      	bne.n	8001010 <_malloc_r+0x8c>
 8001054:	f8c8 2000 	str.w	r2, [r8]
 8001058:	e7ec      	b.n	8001034 <_malloc_r+0xb0>
 800105a:	4623      	mov	r3, r4
 800105c:	6864      	ldr	r4, [r4, #4]
 800105e:	e7ac      	b.n	8000fba <_malloc_r+0x36>
 8001060:	4634      	mov	r4, r6
 8001062:	6876      	ldr	r6, [r6, #4]
 8001064:	e7b4      	b.n	8000fd0 <_malloc_r+0x4c>
 8001066:	4613      	mov	r3, r2
 8001068:	e7cc      	b.n	8001004 <_malloc_r+0x80>
 800106a:	230c      	movs	r3, #12
 800106c:	603b      	str	r3, [r7, #0]
 800106e:	4638      	mov	r0, r7
 8001070:	f000 f80e 	bl	8001090 <__malloc_unlock>
 8001074:	e797      	b.n	8000fa6 <_malloc_r+0x22>
 8001076:	6025      	str	r5, [r4, #0]
 8001078:	e7dc      	b.n	8001034 <_malloc_r+0xb0>
 800107a:	605b      	str	r3, [r3, #4]
 800107c:	deff      	udf	#255	; 0xff
 800107e:	bf00      	nop
 8001080:	20000230 	.word	0x20000230

08001084 <__malloc_lock>:
 8001084:	4801      	ldr	r0, [pc, #4]	; (800108c <__malloc_lock+0x8>)
 8001086:	f7ff bf0e 	b.w	8000ea6 <__retarget_lock_acquire_recursive>
 800108a:	bf00      	nop
 800108c:	2000022c 	.word	0x2000022c

08001090 <__malloc_unlock>:
 8001090:	4801      	ldr	r0, [pc, #4]	; (8001098 <__malloc_unlock+0x8>)
 8001092:	f7ff bf09 	b.w	8000ea8 <__retarget_lock_release_recursive>
 8001096:	bf00      	nop
 8001098:	2000022c 	.word	0x2000022c

0800109c <__sflush_r>:
 800109c:	898a      	ldrh	r2, [r1, #12]
 800109e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010a2:	4605      	mov	r5, r0
 80010a4:	0710      	lsls	r0, r2, #28
 80010a6:	460c      	mov	r4, r1
 80010a8:	d458      	bmi.n	800115c <__sflush_r+0xc0>
 80010aa:	684b      	ldr	r3, [r1, #4]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	dc05      	bgt.n	80010bc <__sflush_r+0x20>
 80010b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	dc02      	bgt.n	80010bc <__sflush_r+0x20>
 80010b6:	2000      	movs	r0, #0
 80010b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80010be:	2e00      	cmp	r6, #0
 80010c0:	d0f9      	beq.n	80010b6 <__sflush_r+0x1a>
 80010c2:	2300      	movs	r3, #0
 80010c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80010c8:	682f      	ldr	r7, [r5, #0]
 80010ca:	6a21      	ldr	r1, [r4, #32]
 80010cc:	602b      	str	r3, [r5, #0]
 80010ce:	d032      	beq.n	8001136 <__sflush_r+0x9a>
 80010d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80010d2:	89a3      	ldrh	r3, [r4, #12]
 80010d4:	075a      	lsls	r2, r3, #29
 80010d6:	d505      	bpl.n	80010e4 <__sflush_r+0x48>
 80010d8:	6863      	ldr	r3, [r4, #4]
 80010da:	1ac0      	subs	r0, r0, r3
 80010dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80010de:	b10b      	cbz	r3, 80010e4 <__sflush_r+0x48>
 80010e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010e2:	1ac0      	subs	r0, r0, r3
 80010e4:	2300      	movs	r3, #0
 80010e6:	4602      	mov	r2, r0
 80010e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80010ea:	6a21      	ldr	r1, [r4, #32]
 80010ec:	4628      	mov	r0, r5
 80010ee:	47b0      	blx	r6
 80010f0:	1c43      	adds	r3, r0, #1
 80010f2:	89a3      	ldrh	r3, [r4, #12]
 80010f4:	d106      	bne.n	8001104 <__sflush_r+0x68>
 80010f6:	6829      	ldr	r1, [r5, #0]
 80010f8:	291d      	cmp	r1, #29
 80010fa:	d82b      	bhi.n	8001154 <__sflush_r+0xb8>
 80010fc:	4a29      	ldr	r2, [pc, #164]	; (80011a4 <__sflush_r+0x108>)
 80010fe:	410a      	asrs	r2, r1
 8001100:	07d6      	lsls	r6, r2, #31
 8001102:	d427      	bmi.n	8001154 <__sflush_r+0xb8>
 8001104:	2200      	movs	r2, #0
 8001106:	6062      	str	r2, [r4, #4]
 8001108:	04d9      	lsls	r1, r3, #19
 800110a:	6922      	ldr	r2, [r4, #16]
 800110c:	6022      	str	r2, [r4, #0]
 800110e:	d504      	bpl.n	800111a <__sflush_r+0x7e>
 8001110:	1c42      	adds	r2, r0, #1
 8001112:	d101      	bne.n	8001118 <__sflush_r+0x7c>
 8001114:	682b      	ldr	r3, [r5, #0]
 8001116:	b903      	cbnz	r3, 800111a <__sflush_r+0x7e>
 8001118:	6560      	str	r0, [r4, #84]	; 0x54
 800111a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800111c:	602f      	str	r7, [r5, #0]
 800111e:	2900      	cmp	r1, #0
 8001120:	d0c9      	beq.n	80010b6 <__sflush_r+0x1a>
 8001122:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001126:	4299      	cmp	r1, r3
 8001128:	d002      	beq.n	8001130 <__sflush_r+0x94>
 800112a:	4628      	mov	r0, r5
 800112c:	f7ff febe 	bl	8000eac <_free_r>
 8001130:	2000      	movs	r0, #0
 8001132:	6360      	str	r0, [r4, #52]	; 0x34
 8001134:	e7c0      	b.n	80010b8 <__sflush_r+0x1c>
 8001136:	2301      	movs	r3, #1
 8001138:	4628      	mov	r0, r5
 800113a:	47b0      	blx	r6
 800113c:	1c41      	adds	r1, r0, #1
 800113e:	d1c8      	bne.n	80010d2 <__sflush_r+0x36>
 8001140:	682b      	ldr	r3, [r5, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d0c5      	beq.n	80010d2 <__sflush_r+0x36>
 8001146:	2b1d      	cmp	r3, #29
 8001148:	d001      	beq.n	800114e <__sflush_r+0xb2>
 800114a:	2b16      	cmp	r3, #22
 800114c:	d101      	bne.n	8001152 <__sflush_r+0xb6>
 800114e:	602f      	str	r7, [r5, #0]
 8001150:	e7b1      	b.n	80010b6 <__sflush_r+0x1a>
 8001152:	89a3      	ldrh	r3, [r4, #12]
 8001154:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001158:	81a3      	strh	r3, [r4, #12]
 800115a:	e7ad      	b.n	80010b8 <__sflush_r+0x1c>
 800115c:	690f      	ldr	r7, [r1, #16]
 800115e:	2f00      	cmp	r7, #0
 8001160:	d0a9      	beq.n	80010b6 <__sflush_r+0x1a>
 8001162:	0793      	lsls	r3, r2, #30
 8001164:	680e      	ldr	r6, [r1, #0]
 8001166:	bf08      	it	eq
 8001168:	694b      	ldreq	r3, [r1, #20]
 800116a:	600f      	str	r7, [r1, #0]
 800116c:	bf18      	it	ne
 800116e:	2300      	movne	r3, #0
 8001170:	eba6 0807 	sub.w	r8, r6, r7
 8001174:	608b      	str	r3, [r1, #8]
 8001176:	f1b8 0f00 	cmp.w	r8, #0
 800117a:	dd9c      	ble.n	80010b6 <__sflush_r+0x1a>
 800117c:	6a21      	ldr	r1, [r4, #32]
 800117e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001180:	4643      	mov	r3, r8
 8001182:	463a      	mov	r2, r7
 8001184:	4628      	mov	r0, r5
 8001186:	47b0      	blx	r6
 8001188:	2800      	cmp	r0, #0
 800118a:	dc06      	bgt.n	800119a <__sflush_r+0xfe>
 800118c:	89a3      	ldrh	r3, [r4, #12]
 800118e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001192:	81a3      	strh	r3, [r4, #12]
 8001194:	f04f 30ff 	mov.w	r0, #4294967295
 8001198:	e78e      	b.n	80010b8 <__sflush_r+0x1c>
 800119a:	4407      	add	r7, r0
 800119c:	eba8 0800 	sub.w	r8, r8, r0
 80011a0:	e7e9      	b.n	8001176 <__sflush_r+0xda>
 80011a2:	bf00      	nop
 80011a4:	dfbffffe 	.word	0xdfbffffe

080011a8 <_fflush_r>:
 80011a8:	b538      	push	{r3, r4, r5, lr}
 80011aa:	690b      	ldr	r3, [r1, #16]
 80011ac:	4605      	mov	r5, r0
 80011ae:	460c      	mov	r4, r1
 80011b0:	b913      	cbnz	r3, 80011b8 <_fflush_r+0x10>
 80011b2:	2500      	movs	r5, #0
 80011b4:	4628      	mov	r0, r5
 80011b6:	bd38      	pop	{r3, r4, r5, pc}
 80011b8:	b118      	cbz	r0, 80011c2 <_fflush_r+0x1a>
 80011ba:	6a03      	ldr	r3, [r0, #32]
 80011bc:	b90b      	cbnz	r3, 80011c2 <_fflush_r+0x1a>
 80011be:	f7ff fc8f 	bl	8000ae0 <__sinit>
 80011c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d0f3      	beq.n	80011b2 <_fflush_r+0xa>
 80011ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80011cc:	07d0      	lsls	r0, r2, #31
 80011ce:	d404      	bmi.n	80011da <_fflush_r+0x32>
 80011d0:	0599      	lsls	r1, r3, #22
 80011d2:	d402      	bmi.n	80011da <_fflush_r+0x32>
 80011d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80011d6:	f7ff fe66 	bl	8000ea6 <__retarget_lock_acquire_recursive>
 80011da:	4628      	mov	r0, r5
 80011dc:	4621      	mov	r1, r4
 80011de:	f7ff ff5d 	bl	800109c <__sflush_r>
 80011e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80011e4:	07da      	lsls	r2, r3, #31
 80011e6:	4605      	mov	r5, r0
 80011e8:	d4e4      	bmi.n	80011b4 <_fflush_r+0xc>
 80011ea:	89a3      	ldrh	r3, [r4, #12]
 80011ec:	059b      	lsls	r3, r3, #22
 80011ee:	d4e1      	bmi.n	80011b4 <_fflush_r+0xc>
 80011f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80011f2:	f7ff fe59 	bl	8000ea8 <__retarget_lock_release_recursive>
 80011f6:	e7dd      	b.n	80011b4 <_fflush_r+0xc>

080011f8 <__swhatbuf_r>:
 80011f8:	b570      	push	{r4, r5, r6, lr}
 80011fa:	460c      	mov	r4, r1
 80011fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001200:	2900      	cmp	r1, #0
 8001202:	b096      	sub	sp, #88	; 0x58
 8001204:	4615      	mov	r5, r2
 8001206:	461e      	mov	r6, r3
 8001208:	da0d      	bge.n	8001226 <__swhatbuf_r+0x2e>
 800120a:	89a3      	ldrh	r3, [r4, #12]
 800120c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001210:	f04f 0100 	mov.w	r1, #0
 8001214:	bf0c      	ite	eq
 8001216:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800121a:	2340      	movne	r3, #64	; 0x40
 800121c:	2000      	movs	r0, #0
 800121e:	6031      	str	r1, [r6, #0]
 8001220:	602b      	str	r3, [r5, #0]
 8001222:	b016      	add	sp, #88	; 0x58
 8001224:	bd70      	pop	{r4, r5, r6, pc}
 8001226:	466a      	mov	r2, sp
 8001228:	f000 f848 	bl	80012bc <_fstat_r>
 800122c:	2800      	cmp	r0, #0
 800122e:	dbec      	blt.n	800120a <__swhatbuf_r+0x12>
 8001230:	9901      	ldr	r1, [sp, #4]
 8001232:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001236:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800123a:	4259      	negs	r1, r3
 800123c:	4159      	adcs	r1, r3
 800123e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001242:	e7eb      	b.n	800121c <__swhatbuf_r+0x24>

08001244 <__smakebuf_r>:
 8001244:	898b      	ldrh	r3, [r1, #12]
 8001246:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001248:	079d      	lsls	r5, r3, #30
 800124a:	4606      	mov	r6, r0
 800124c:	460c      	mov	r4, r1
 800124e:	d507      	bpl.n	8001260 <__smakebuf_r+0x1c>
 8001250:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001254:	6023      	str	r3, [r4, #0]
 8001256:	6123      	str	r3, [r4, #16]
 8001258:	2301      	movs	r3, #1
 800125a:	6163      	str	r3, [r4, #20]
 800125c:	b002      	add	sp, #8
 800125e:	bd70      	pop	{r4, r5, r6, pc}
 8001260:	ab01      	add	r3, sp, #4
 8001262:	466a      	mov	r2, sp
 8001264:	f7ff ffc8 	bl	80011f8 <__swhatbuf_r>
 8001268:	9900      	ldr	r1, [sp, #0]
 800126a:	4605      	mov	r5, r0
 800126c:	4630      	mov	r0, r6
 800126e:	f7ff fe89 	bl	8000f84 <_malloc_r>
 8001272:	b948      	cbnz	r0, 8001288 <__smakebuf_r+0x44>
 8001274:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001278:	059a      	lsls	r2, r3, #22
 800127a:	d4ef      	bmi.n	800125c <__smakebuf_r+0x18>
 800127c:	f023 0303 	bic.w	r3, r3, #3
 8001280:	f043 0302 	orr.w	r3, r3, #2
 8001284:	81a3      	strh	r3, [r4, #12]
 8001286:	e7e3      	b.n	8001250 <__smakebuf_r+0xc>
 8001288:	89a3      	ldrh	r3, [r4, #12]
 800128a:	6020      	str	r0, [r4, #0]
 800128c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001290:	81a3      	strh	r3, [r4, #12]
 8001292:	9b00      	ldr	r3, [sp, #0]
 8001294:	6163      	str	r3, [r4, #20]
 8001296:	9b01      	ldr	r3, [sp, #4]
 8001298:	6120      	str	r0, [r4, #16]
 800129a:	b15b      	cbz	r3, 80012b4 <__smakebuf_r+0x70>
 800129c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80012a0:	4630      	mov	r0, r6
 80012a2:	f000 f81d 	bl	80012e0 <_isatty_r>
 80012a6:	b128      	cbz	r0, 80012b4 <__smakebuf_r+0x70>
 80012a8:	89a3      	ldrh	r3, [r4, #12]
 80012aa:	f023 0303 	bic.w	r3, r3, #3
 80012ae:	f043 0301 	orr.w	r3, r3, #1
 80012b2:	81a3      	strh	r3, [r4, #12]
 80012b4:	89a3      	ldrh	r3, [r4, #12]
 80012b6:	431d      	orrs	r5, r3
 80012b8:	81a5      	strh	r5, [r4, #12]
 80012ba:	e7cf      	b.n	800125c <__smakebuf_r+0x18>

080012bc <_fstat_r>:
 80012bc:	b538      	push	{r3, r4, r5, lr}
 80012be:	4d07      	ldr	r5, [pc, #28]	; (80012dc <_fstat_r+0x20>)
 80012c0:	2300      	movs	r3, #0
 80012c2:	4604      	mov	r4, r0
 80012c4:	4608      	mov	r0, r1
 80012c6:	4611      	mov	r1, r2
 80012c8:	602b      	str	r3, [r5, #0]
 80012ca:	f7ff faf0 	bl	80008ae <_fstat>
 80012ce:	1c43      	adds	r3, r0, #1
 80012d0:	d102      	bne.n	80012d8 <_fstat_r+0x1c>
 80012d2:	682b      	ldr	r3, [r5, #0]
 80012d4:	b103      	cbz	r3, 80012d8 <_fstat_r+0x1c>
 80012d6:	6023      	str	r3, [r4, #0]
 80012d8:	bd38      	pop	{r3, r4, r5, pc}
 80012da:	bf00      	nop
 80012dc:	20000228 	.word	0x20000228

080012e0 <_isatty_r>:
 80012e0:	b538      	push	{r3, r4, r5, lr}
 80012e2:	4d06      	ldr	r5, [pc, #24]	; (80012fc <_isatty_r+0x1c>)
 80012e4:	2300      	movs	r3, #0
 80012e6:	4604      	mov	r4, r0
 80012e8:	4608      	mov	r0, r1
 80012ea:	602b      	str	r3, [r5, #0]
 80012ec:	f7ff faef 	bl	80008ce <_isatty>
 80012f0:	1c43      	adds	r3, r0, #1
 80012f2:	d102      	bne.n	80012fa <_isatty_r+0x1a>
 80012f4:	682b      	ldr	r3, [r5, #0]
 80012f6:	b103      	cbz	r3, 80012fa <_isatty_r+0x1a>
 80012f8:	6023      	str	r3, [r4, #0]
 80012fa:	bd38      	pop	{r3, r4, r5, pc}
 80012fc:	20000228 	.word	0x20000228

08001300 <_sbrk_r>:
 8001300:	b538      	push	{r3, r4, r5, lr}
 8001302:	4d06      	ldr	r5, [pc, #24]	; (800131c <_sbrk_r+0x1c>)
 8001304:	2300      	movs	r3, #0
 8001306:	4604      	mov	r4, r0
 8001308:	4608      	mov	r0, r1
 800130a:	602b      	str	r3, [r5, #0]
 800130c:	f7ff faf8 	bl	8000900 <_sbrk>
 8001310:	1c43      	adds	r3, r0, #1
 8001312:	d102      	bne.n	800131a <_sbrk_r+0x1a>
 8001314:	682b      	ldr	r3, [r5, #0]
 8001316:	b103      	cbz	r3, 800131a <_sbrk_r+0x1a>
 8001318:	6023      	str	r3, [r4, #0]
 800131a:	bd38      	pop	{r3, r4, r5, pc}
 800131c:	20000228 	.word	0x20000228

08001320 <_init>:
 8001320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001322:	bf00      	nop
 8001324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001326:	bc08      	pop	{r3}
 8001328:	469e      	mov	lr, r3
 800132a:	4770      	bx	lr

0800132c <_fini>:
 800132c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800132e:	bf00      	nop
 8001330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001332:	bc08      	pop	{r3}
 8001334:	469e      	mov	lr, r3
 8001336:	4770      	bx	lr
