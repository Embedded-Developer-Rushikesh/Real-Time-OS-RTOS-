
STM32_Drivers_Layer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c90  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000e54  08000e5c  00010e5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000e54  08000e54  00010e5c  2**0
                  CONTENTS
  4 .ARM          00000000  08000e54  08000e54  00010e5c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e54  08000e5c  00010e5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e54  08000e54  00010e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e58  08000e58  00010e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010e5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  20000000  08000e5c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000044  08000e5c  00020044  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010e5c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010e8c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000012d6  00000000  00000000  00010ecf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000541  00000000  00000000  000121a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000138  00000000  00000000  000126e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000e0  00000000  00000000  00012820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000046b  00000000  00000000  00012900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001d4a  00000000  00000000  00012d6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009af4  00000000  00000000  00014ab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000430  00000000  00000000  0001e5ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  0001e9dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000e3c 	.word	0x08000e3c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000e3c 	.word	0x08000e3c

08000204 <USART_PeriClockControl>:
 *
 * @Note              -

 */
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
 800020c:	460b      	mov	r3, r1
 800020e:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE) {
 8000210:	78fb      	ldrb	r3, [r7, #3]
 8000212:	2b01      	cmp	r3, #1
 8000214:	d141      	bne.n	800029a <USART_PeriClockControl+0x96>
		if(pUSARTx==USART1)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4a43      	ldr	r2, [pc, #268]	; (8000328 <USART_PeriClockControl+0x124>)
 800021a:	4293      	cmp	r3, r2
 800021c:	d106      	bne.n	800022c <USART_PeriClockControl+0x28>
		{
			USART1_PCCK_EN();
 800021e:	4b43      	ldr	r3, [pc, #268]	; (800032c <USART_PeriClockControl+0x128>)
 8000220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000222:	4a42      	ldr	r2, [pc, #264]	; (800032c <USART_PeriClockControl+0x128>)
 8000224:	f043 0310 	orr.w	r3, r3, #16
 8000228:	6453      	str	r3, [r2, #68]	; 0x44
			USART6_PCCK_DI();
		} else {
			;
		}
	}
}
 800022a:	e077      	b.n	800031c <USART_PeriClockControl+0x118>
		}else if(pUSARTx==USART2)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	4a40      	ldr	r2, [pc, #256]	; (8000330 <USART_PeriClockControl+0x12c>)
 8000230:	4293      	cmp	r3, r2
 8000232:	d106      	bne.n	8000242 <USART_PeriClockControl+0x3e>
			USART2_PCCK_EN();
 8000234:	4b3d      	ldr	r3, [pc, #244]	; (800032c <USART_PeriClockControl+0x128>)
 8000236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000238:	4a3c      	ldr	r2, [pc, #240]	; (800032c <USART_PeriClockControl+0x128>)
 800023a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800023e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000240:	e06c      	b.n	800031c <USART_PeriClockControl+0x118>
		}else if(pUSARTx==USART3)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	4a3b      	ldr	r2, [pc, #236]	; (8000334 <USART_PeriClockControl+0x130>)
 8000246:	4293      	cmp	r3, r2
 8000248:	d106      	bne.n	8000258 <USART_PeriClockControl+0x54>
			USART3_PCCK_EN();
 800024a:	4b38      	ldr	r3, [pc, #224]	; (800032c <USART_PeriClockControl+0x128>)
 800024c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800024e:	4a37      	ldr	r2, [pc, #220]	; (800032c <USART_PeriClockControl+0x128>)
 8000250:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000254:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000256:	e061      	b.n	800031c <USART_PeriClockControl+0x118>
		}else if(pUSARTx==UART4)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	4a37      	ldr	r2, [pc, #220]	; (8000338 <USART_PeriClockControl+0x134>)
 800025c:	4293      	cmp	r3, r2
 800025e:	d106      	bne.n	800026e <USART_PeriClockControl+0x6a>
			UART4_PCCK_EN();
 8000260:	4b32      	ldr	r3, [pc, #200]	; (800032c <USART_PeriClockControl+0x128>)
 8000262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000264:	4a31      	ldr	r2, [pc, #196]	; (800032c <USART_PeriClockControl+0x128>)
 8000266:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800026a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800026c:	e056      	b.n	800031c <USART_PeriClockControl+0x118>
		}else if(pUSARTx==UART5)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	4a32      	ldr	r2, [pc, #200]	; (800033c <USART_PeriClockControl+0x138>)
 8000272:	4293      	cmp	r3, r2
 8000274:	d106      	bne.n	8000284 <USART_PeriClockControl+0x80>
			UART5_PCCK_EN();
 8000276:	4b2d      	ldr	r3, [pc, #180]	; (800032c <USART_PeriClockControl+0x128>)
 8000278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800027a:	4a2c      	ldr	r2, [pc, #176]	; (800032c <USART_PeriClockControl+0x128>)
 800027c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000280:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000282:	e04b      	b.n	800031c <USART_PeriClockControl+0x118>
		}else if(pUSARTx==USART6){
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	4a2e      	ldr	r2, [pc, #184]	; (8000340 <USART_PeriClockControl+0x13c>)
 8000288:	4293      	cmp	r3, r2
 800028a:	d147      	bne.n	800031c <USART_PeriClockControl+0x118>
			 USART6_PCCK_EN();
 800028c:	4b27      	ldr	r3, [pc, #156]	; (800032c <USART_PeriClockControl+0x128>)
 800028e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000290:	4a26      	ldr	r2, [pc, #152]	; (800032c <USART_PeriClockControl+0x128>)
 8000292:	f043 0320 	orr.w	r3, r3, #32
 8000296:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000298:	e040      	b.n	800031c <USART_PeriClockControl+0x118>
		if (pUSARTx == USART1) {
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	4a22      	ldr	r2, [pc, #136]	; (8000328 <USART_PeriClockControl+0x124>)
 800029e:	4293      	cmp	r3, r2
 80002a0:	d106      	bne.n	80002b0 <USART_PeriClockControl+0xac>
			USART1_PCCK_DI();
 80002a2:	4b22      	ldr	r3, [pc, #136]	; (800032c <USART_PeriClockControl+0x128>)
 80002a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002a6:	4a21      	ldr	r2, [pc, #132]	; (800032c <USART_PeriClockControl+0x128>)
 80002a8:	f023 0310 	bic.w	r3, r3, #16
 80002ac:	6453      	str	r3, [r2, #68]	; 0x44
}
 80002ae:	e035      	b.n	800031c <USART_PeriClockControl+0x118>
		} else if (pUSARTx == USART2) {
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	4a1f      	ldr	r2, [pc, #124]	; (8000330 <USART_PeriClockControl+0x12c>)
 80002b4:	4293      	cmp	r3, r2
 80002b6:	d106      	bne.n	80002c6 <USART_PeriClockControl+0xc2>
			USART2_PCCK_DI();
 80002b8:	4b1c      	ldr	r3, [pc, #112]	; (800032c <USART_PeriClockControl+0x128>)
 80002ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002bc:	4a1b      	ldr	r2, [pc, #108]	; (800032c <USART_PeriClockControl+0x128>)
 80002be:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80002c2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80002c4:	e02a      	b.n	800031c <USART_PeriClockControl+0x118>
		} else if (pUSARTx == USART3) {
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	4a1a      	ldr	r2, [pc, #104]	; (8000334 <USART_PeriClockControl+0x130>)
 80002ca:	4293      	cmp	r3, r2
 80002cc:	d106      	bne.n	80002dc <USART_PeriClockControl+0xd8>
			USART3_PCCK_DI();
 80002ce:	4b17      	ldr	r3, [pc, #92]	; (800032c <USART_PeriClockControl+0x128>)
 80002d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002d2:	4a16      	ldr	r2, [pc, #88]	; (800032c <USART_PeriClockControl+0x128>)
 80002d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80002d8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80002da:	e01f      	b.n	800031c <USART_PeriClockControl+0x118>
		} else if (pUSARTx == UART4) {
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	4a16      	ldr	r2, [pc, #88]	; (8000338 <USART_PeriClockControl+0x134>)
 80002e0:	4293      	cmp	r3, r2
 80002e2:	d106      	bne.n	80002f2 <USART_PeriClockControl+0xee>
			UART4_PCCK_DI();
 80002e4:	4b11      	ldr	r3, [pc, #68]	; (800032c <USART_PeriClockControl+0x128>)
 80002e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002e8:	4a10      	ldr	r2, [pc, #64]	; (800032c <USART_PeriClockControl+0x128>)
 80002ea:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80002ee:	6413      	str	r3, [r2, #64]	; 0x40
}
 80002f0:	e014      	b.n	800031c <USART_PeriClockControl+0x118>
		} else if (pUSARTx == UART5) {
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	4a11      	ldr	r2, [pc, #68]	; (800033c <USART_PeriClockControl+0x138>)
 80002f6:	4293      	cmp	r3, r2
 80002f8:	d106      	bne.n	8000308 <USART_PeriClockControl+0x104>
			UART5_PCCK_DI();
 80002fa:	4b0c      	ldr	r3, [pc, #48]	; (800032c <USART_PeriClockControl+0x128>)
 80002fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002fe:	4a0b      	ldr	r2, [pc, #44]	; (800032c <USART_PeriClockControl+0x128>)
 8000300:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000304:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000306:	e009      	b.n	800031c <USART_PeriClockControl+0x118>
		} else if (pUSARTx == USART6) {
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	4a0d      	ldr	r2, [pc, #52]	; (8000340 <USART_PeriClockControl+0x13c>)
 800030c:	4293      	cmp	r3, r2
 800030e:	d105      	bne.n	800031c <USART_PeriClockControl+0x118>
			USART6_PCCK_DI();
 8000310:	4b06      	ldr	r3, [pc, #24]	; (800032c <USART_PeriClockControl+0x128>)
 8000312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000314:	4a05      	ldr	r2, [pc, #20]	; (800032c <USART_PeriClockControl+0x128>)
 8000316:	f023 0320 	bic.w	r3, r3, #32
 800031a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800031c:	bf00      	nop
 800031e:	370c      	adds	r7, #12
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr
 8000328:	40011000 	.word	0x40011000
 800032c:	40023800 	.word	0x40023800
 8000330:	40004400 	.word	0x40004400
 8000334:	40004800 	.word	0x40004800
 8000338:	40004c00 	.word	0x40004c00
 800033c:	40005000 	.word	0x40005000
 8000340:	40011400 	.word	0x40011400

08000344 <USART_Init>:
 *
 * @Note              -

 */
void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
	USART_PeriClockControl(pUSARTHandle->pUSARTx,ENABLE);
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	2101      	movs	r1, #1
 8000352:	4618      	mov	r0, r3
 8000354:	f7ff ff56 	bl	8000204 <USART_PeriClockControl>
	switch(pUSARTHandle->USART_Config.USART_Mode)
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	791b      	ldrb	r3, [r3, #4]
 800035c:	2b02      	cmp	r3, #2
 800035e:	d013      	beq.n	8000388 <USART_Init+0x44>
 8000360:	2b02      	cmp	r3, #2
 8000362:	dc1a      	bgt.n	800039a <USART_Init+0x56>
 8000364:	2b00      	cmp	r3, #0
 8000366:	d00a      	beq.n	800037e <USART_Init+0x3a>
 8000368:	2b01      	cmp	r3, #1
 800036a:	d116      	bne.n	800039a <USART_Init+0x56>
	{
	case USART_MODE_ONLY_RX:
	{
		pUSARTHandle->pUSARTx->CR1|= (1 << USART_CR1_RE);
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	68da      	ldr	r2, [r3, #12]
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	f042 0204 	orr.w	r2, r2, #4
 800037a:	60da      	str	r2, [r3, #12]
		break;
 800037c:	e00e      	b.n	800039c <USART_Init+0x58>
	}
	case USART_MODE_ONLY_TX:
	{
		pUSARTHandle->pUSARTx->CR1= (1 << USART_CR1_TE);
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	2208      	movs	r2, #8
 8000384:	60da      	str	r2, [r3, #12]
		break;
 8000386:	e009      	b.n	800039c <USART_Init+0x58>
	}
	case USART_MODE_TXRX:
	{
		pUSARTHandle->pUSARTx->CR1|= ((1 << USART_CR1_RE)|(1 << USART_CR1_TE));
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	68da      	ldr	r2, [r3, #12]
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	f042 020c 	orr.w	r2, r2, #12
 8000396:	60da      	str	r2, [r3, #12]
		break;
 8000398:	e000      	b.n	800039c <USART_Init+0x58>
	}
	default:
	{
		break;
 800039a:	bf00      	nop
	}
	}
	if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	7b9b      	ldrb	r3, [r3, #14]
 80003a0:	2b01      	cmp	r3, #1
 80003a2:	d10e      	bne.n	80003c2 <USART_Init+0x7e>
	{
		pUSARTHandle->pUSARTx->CR1 |= ( 1 << USART_CR1_PCE);
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	68da      	ldr	r2, [r3, #12]
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80003b2:	60da      	str	r2, [r3, #12]
		pUSARTHandle->pUSARTx->CR1 |= ( 0 << USART_CR1_PS);
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	681a      	ldr	r2, [r3, #0]
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	68d2      	ldr	r2, [r2, #12]
 80003be:	60da      	str	r2, [r3, #12]
 80003c0:	e013      	b.n	80003ea <USART_Init+0xa6>
	}
	else if(pUSARTHandle->USART_Config.USART_ParityControl ==USART_PARITY_EN_ODD)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	7b9b      	ldrb	r3, [r3, #14]
 80003c6:	2b02      	cmp	r3, #2
 80003c8:	d10f      	bne.n	80003ea <USART_Init+0xa6>
	{
		pUSARTHandle->pUSARTx->CR1 |= ( 1 << USART_CR1_PCE);
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	68da      	ldr	r2, [r3, #12]
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80003d8:	60da      	str	r2, [r3, #12]
		pUSARTHandle->pUSARTx->CR1 |= ( 1 << USART_CR1_PS);
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	68da      	ldr	r2, [r3, #12]
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80003e8:	60da      	str	r2, [r3, #12]
	}else
	{
		;
	}
	 //Implement the code to configure the Word length configuration item
	pUSARTHandle->pUSARTx->CR1 |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M ;
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	68da      	ldr	r2, [r3, #12]
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	7b5b      	ldrb	r3, [r3, #13]
 80003f4:	031b      	lsls	r3, r3, #12
 80003f6:	4619      	mov	r1, r3
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	430a      	orrs	r2, r1
 80003fe:	60da      	str	r2, [r3, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	switch(pUSARTHandle->USART_Config.USART_NoOfStopBits)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	7b1b      	ldrb	r3, [r3, #12]
 8000404:	2b03      	cmp	r3, #3
 8000406:	d82d      	bhi.n	8000464 <USART_Init+0x120>
 8000408:	a201      	add	r2, pc, #4	; (adr r2, 8000410 <USART_Init+0xcc>)
 800040a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800040e:	bf00      	nop
 8000410:	08000421 	.word	0x08000421
 8000414:	0800042f 	.word	0x0800042f
 8000418:	08000441 	.word	0x08000441
 800041c:	08000453 	.word	0x08000453
	{
	case USART_STOPBITS_1:
	{
		pUSARTHandle->pUSARTx->CR2 |=0<< USART_CR2_STOP;
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681a      	ldr	r2, [r3, #0]
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	6912      	ldr	r2, [r2, #16]
 800042a:	611a      	str	r2, [r3, #16]
		break;
 800042c:	e01b      	b.n	8000466 <USART_Init+0x122>
	}
	case USART_STOPBITS_0_5:
	{
		pUSARTHandle->pUSARTx->CR2 |=1<< USART_CR2_STOP;
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	691a      	ldr	r2, [r3, #16]
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800043c:	611a      	str	r2, [r3, #16]
		break;
 800043e:	e012      	b.n	8000466 <USART_Init+0x122>
	}
	case USART_STOPBITS_2:
	{
		pUSARTHandle->pUSARTx->CR2 |=2<< USART_CR2_STOP;
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	691a      	ldr	r2, [r3, #16]
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800044e:	611a      	str	r2, [r3, #16]
		break;
 8000450:	e009      	b.n	8000466 <USART_Init+0x122>
	}
	case USART_STOPBITS_1_5:
	{
		pUSARTHandle->pUSARTx->CR2 |=3<< USART_CR2_STOP;
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	691a      	ldr	r2, [r3, #16]
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000460:	611a      	str	r2, [r3, #16]
		break;
 8000462:	e000      	b.n	8000466 <USART_Init+0x122>
	}
	default:
	{
		break;
 8000464:	bf00      	nop
	}
	}


	//Configuration of USART hardware flow control
	switch(pUSARTHandle->USART_Config.USART_HWFlowControl)
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	7bdb      	ldrb	r3, [r3, #15]
 800046a:	2b03      	cmp	r3, #3
 800046c:	d018      	beq.n	80004a0 <USART_Init+0x15c>
 800046e:	2b03      	cmp	r3, #3
 8000470:	dc1f      	bgt.n	80004b2 <USART_Init+0x16e>
 8000472:	2b01      	cmp	r3, #1
 8000474:	d002      	beq.n	800047c <USART_Init+0x138>
 8000476:	2b02      	cmp	r3, #2
 8000478:	d009      	beq.n	800048e <USART_Init+0x14a>
			pUSARTHandle->pUSARTx->CR3 |=( 1 << USART_CR3_CTSE)|( 1 << USART_CR3_RTSE);
			break;
		}
		default:
		{
			break;
 800047a:	e01a      	b.n	80004b2 <USART_Init+0x16e>
			pUSARTHandle->pUSARTx->CR3 |= ( 1 << USART_CR3_CTSE);
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	695a      	ldr	r2, [r3, #20]
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800048a:	615a      	str	r2, [r3, #20]
			break;
 800048c:	e012      	b.n	80004b4 <USART_Init+0x170>
			pUSARTHandle->pUSARTx->CR3 |=( 1 << USART_CR3_RTSE);
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	695a      	ldr	r2, [r3, #20]
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800049c:	615a      	str	r2, [r3, #20]
			break;
 800049e:	e009      	b.n	80004b4 <USART_Init+0x170>
			pUSARTHandle->pUSARTx->CR3 |=( 1 << USART_CR3_CTSE)|( 1 << USART_CR3_RTSE);
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	695a      	ldr	r2, [r3, #20]
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80004ae:	615a      	str	r2, [r3, #20]
			break;
 80004b0:	e000      	b.n	80004b4 <USART_Init+0x170>
			break;
 80004b2:	bf00      	nop
	/******************************** Configuration of BRR(Baudrate register)******************************************/

		//Implement the code to configure the baud rate
		//We will cover this in the lecture. No action required here
	//	USART_SetBaudRate(pUSARTHandle->pUSARTx,pUSARTHandle->USART_Config.USART_Baud);
}
 80004b4:	bf00      	nop
 80004b6:	3708      	adds	r7, #8
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}

080004bc <USART_PeripheralControl>:
 *
 * @Note              -

 */
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t Cmd)
{
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
 80004c4:	460b      	mov	r3, r1
 80004c6:	70fb      	strb	r3, [r7, #3]
	if(Cmd == ENABLE)
 80004c8:	78fb      	ldrb	r3, [r7, #3]
 80004ca:	2b01      	cmp	r3, #1
 80004cc:	d106      	bne.n	80004dc <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |= (1 << 13);
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	68db      	ldr	r3, [r3, #12]
 80004d2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	60da      	str	r2, [r3, #12]
	}else
	{
		pUSARTx->CR1 &= ~(1 << 13);
	}

}
 80004da:	e005      	b.n	80004e8 <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1 << 13);
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	68db      	ldr	r3, [r3, #12]
 80004e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	60da      	str	r2, [r3, #12]
}
 80004e8:	bf00      	nop
 80004ea:	370c      	adds	r7, #12
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr

080004f4 <USART_GetFlagStatus>:
 *
 * @Note              -

 */
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint8_t StatusFlagName)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	460b      	mov	r3, r1
 80004fe:	70fb      	strb	r3, [r7, #3]
    if(pUSARTx->SR & StatusFlagName)
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681a      	ldr	r2, [r3, #0]
 8000504:	78fb      	ldrb	r3, [r7, #3]
 8000506:	4013      	ands	r3, r2
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <USART_GetFlagStatus+0x1c>
    {
    	return SET;
 800050c:	2301      	movs	r3, #1
 800050e:	e000      	b.n	8000512 <USART_GetFlagStatus+0x1e>
    }

   return RESET;
 8000510:	2300      	movs	r3, #0
}
 8000512:	4618      	mov	r0, r3
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr

0800051e <USART_ReceiveData>:
 * @Note              -

 */

void USART_ReceiveData(USART_Handle_t *pUSARTHandle, uint8_t *pRxBuffer, uint32_t Len)
{
 800051e:	b580      	push	{r7, lr}
 8000520:	b086      	sub	sp, #24
 8000522:	af00      	add	r7, sp, #0
 8000524:	60f8      	str	r0, [r7, #12]
 8000526:	60b9      	str	r1, [r7, #8]
 8000528:	607a      	str	r2, [r7, #4]
	//Loop over until "Len" number of bytes are transferred
		for(uint32_t i = 0 ; i < Len; i++)
 800052a:	2300      	movs	r3, #0
 800052c:	617b      	str	r3, [r7, #20]
 800052e:	e045      	b.n	80005bc <USART_ReceiveData+0x9e>
		{
			//Implement the code to wait until RXNE flag is set in the SR
			while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_RXNE));
 8000530:	bf00      	nop
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	2120      	movs	r1, #32
 8000538:	4618      	mov	r0, r3
 800053a:	f7ff ffdb 	bl	80004f4 <USART_GetFlagStatus>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d0f6      	beq.n	8000532 <USART_ReceiveData+0x14>

			//Check the USART_WordLength to decide whether we are going to receive 9bit of data in a frame or 8 bit
			if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	7b5b      	ldrb	r3, [r3, #13]
 8000548:	2b01      	cmp	r3, #1
 800054a:	d11d      	bne.n	8000588 <USART_ReceiveData+0x6a>
			{
				//We are going to receive 9bit data in a frame

				//Now, check are we using USART_ParityControl control or not
				if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	7b9b      	ldrb	r3, [r3, #14]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d10f      	bne.n	8000574 <USART_ReceiveData+0x56>
				{
					//No parity is used , so all 9bits will be of user data

					//read only first 9 bits so mask the DR with 0x01FF
					*((uint16_t*) pRxBuffer) = (pUSARTHandle->pUSARTx->DR  & (uint16_t)0x01FF);
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	685b      	ldr	r3, [r3, #4]
 800055a:	b29b      	uxth	r3, r3
 800055c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000560:	b29a      	uxth	r2, r3
 8000562:	68bb      	ldr	r3, [r7, #8]
 8000564:	801a      	strh	r2, [r3, #0]

					//Now increment the pRxBuffer two times
					pRxBuffer++;
 8000566:	68bb      	ldr	r3, [r7, #8]
 8000568:	3301      	adds	r3, #1
 800056a:	60bb      	str	r3, [r7, #8]
					pRxBuffer++;
 800056c:	68bb      	ldr	r3, [r7, #8]
 800056e:	3301      	adds	r3, #1
 8000570:	60bb      	str	r3, [r7, #8]
 8000572:	e020      	b.n	80005b6 <USART_ReceiveData+0x98>
				}
				else
				{
					//Parity is used, so 8bits will be of user data and 1 bit is parity
					 *pRxBuffer = (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	685b      	ldr	r3, [r3, #4]
 800057a:	b2da      	uxtb	r2, r3
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	701a      	strb	r2, [r3, #0]
					 pRxBuffer++;
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	3301      	adds	r3, #1
 8000584:	60bb      	str	r3, [r7, #8]
 8000586:	e016      	b.n	80005b6 <USART_ReceiveData+0x98>
			else
			{
				//We are going to receive 8bit data in a frame

				//Now, check are we using USART_ParityControl control or not
				if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	7b9b      	ldrb	r3, [r3, #14]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d106      	bne.n	800059e <USART_ReceiveData+0x80>
				{
					//No parity is used , so all 8bits will be of user data

					//read 8 bits from DR
					 *pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	685b      	ldr	r3, [r3, #4]
 8000596:	b2da      	uxtb	r2, r3
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	701a      	strb	r2, [r3, #0]
 800059c:	e008      	b.n	80005b0 <USART_ReceiveData+0x92>
				else
				{
					//Parity is used, so , 7 bits will be of user data and 1 bit is parity

					//read only 7 bits , hence mask the DR with 0X7F
					 *pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0x7F);
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	685b      	ldr	r3, [r3, #4]
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	701a      	strb	r2, [r3, #0]

				}

				//Now , increment the pRxBuffer
				pRxBuffer++;
 80005b0:	68bb      	ldr	r3, [r7, #8]
 80005b2:	3301      	adds	r3, #1
 80005b4:	60bb      	str	r3, [r7, #8]
		for(uint32_t i = 0 ; i < Len; i++)
 80005b6:	697b      	ldr	r3, [r7, #20]
 80005b8:	3301      	adds	r3, #1
 80005ba:	617b      	str	r3, [r7, #20]
 80005bc:	697a      	ldr	r2, [r7, #20]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	429a      	cmp	r2, r3
 80005c2:	d3b5      	bcc.n	8000530 <USART_ReceiveData+0x12>
			}
		}
}
 80005c4:	bf00      	nop
 80005c6:	bf00      	nop
 80005c8:	3718      	adds	r7, #24
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
	...

080005d0 <GPIO_Init>:
 *
 * @Note              -  none
*/

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80005d0:	b590      	push	{r4, r7, lr}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0;
 80005d8:	2300      	movs	r3, #0
 80005da:	60fb      	str	r3, [r7, #12]
	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	2101      	movs	r1, #1
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 f9d2 	bl	800098c <GPIO_PeriClockControl>

	//Pin Configuration
	switch (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode) {
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	795b      	ldrb	r3, [r3, #5]
 80005ec:	2b06      	cmp	r3, #6
 80005ee:	f200 80d0 	bhi.w	8000792 <GPIO_Init+0x1c2>
 80005f2:	a201      	add	r2, pc, #4	; (adr r2, 80005f8 <GPIO_Init+0x28>)
 80005f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f8:	0800068d 	.word	0x0800068d
 80005fc:	080006cb 	.word	0x080006cb
 8000600:	08000651 	.word	0x08000651
 8000604:	08000615 	.word	0x08000615
 8000608:	08000707 	.word	0x08000707
 800060c:	08000737 	.word	0x08000737
 8000610:	08000767 	.word	0x08000767
	case GPIO_MODE_ANALOG: {
		pGPIOHandle->pGPIOx->MODER &= ~(0x3<< (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber))); // Clearing the position
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	791b      	ldrb	r3, [r3, #4]
 800061e:	005b      	lsls	r3, r3, #1
 8000620:	2103      	movs	r1, #3
 8000622:	fa01 f303 	lsl.w	r3, r1, r3
 8000626:	43db      	mvns	r3, r3
 8000628:	4619      	mov	r1, r3
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	400a      	ands	r2, r1
 8000630:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= (0x3<< (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	791b      	ldrb	r3, [r3, #4]
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	2103      	movs	r1, #3
 8000640:	fa01 f303 	lsl.w	r3, r1, r3
 8000644:	4619      	mov	r1, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	430a      	orrs	r2, r1
 800064c:	601a      	str	r2, [r3, #0]
		break;
 800064e:	e0a1      	b.n	8000794 <GPIO_Init+0x1c4>
	}
	case GPIO_MODE_ALTFN: {
		pGPIOHandle->pGPIOx->MODER &= ~(0x3<< (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber))); // Clearing the position
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	791b      	ldrb	r3, [r3, #4]
 800065a:	005b      	lsls	r3, r3, #1
 800065c:	2103      	movs	r1, #3
 800065e:	fa01 f303 	lsl.w	r3, r1, r3
 8000662:	43db      	mvns	r3, r3
 8000664:	4619      	mov	r1, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	400a      	ands	r2, r1
 800066c:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= (0x2<< (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	791b      	ldrb	r3, [r3, #4]
 8000678:	005b      	lsls	r3, r3, #1
 800067a:	2102      	movs	r1, #2
 800067c:	fa01 f303 	lsl.w	r3, r1, r3
 8000680:	4619      	mov	r1, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	430a      	orrs	r2, r1
 8000688:	601a      	str	r2, [r3, #0]
		break;
 800068a:	e083      	b.n	8000794 <GPIO_Init+0x1c4>
	}
	case GPIO_MODE_IN:
	{
		pGPIOHandle->pGPIOx->MODER &= ~(0x3<< (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber))); // Clearing the position
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	681a      	ldr	r2, [r3, #0]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	791b      	ldrb	r3, [r3, #4]
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	2103      	movs	r1, #3
 800069a:	fa01 f303 	lsl.w	r3, r1, r3
 800069e:	43db      	mvns	r3, r3
 80006a0:	4619      	mov	r1, r3
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	400a      	ands	r2, r1
 80006a8:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER &= ~(0x1<< (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	681a      	ldr	r2, [r3, #0]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	791b      	ldrb	r3, [r3, #4]
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	2101      	movs	r1, #1
 80006b8:	fa01 f303 	lsl.w	r3, r1, r3
 80006bc:	43db      	mvns	r3, r3
 80006be:	4619      	mov	r1, r3
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	400a      	ands	r2, r1
 80006c6:	601a      	str	r2, [r3, #0]
		break;
 80006c8:	e064      	b.n	8000794 <GPIO_Init+0x1c4>
	}
	case GPIO_MODE_OUT:
	{
		pGPIOHandle->pGPIOx->MODER &= ~(0x3<< (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber))); // Clearing the position
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	791b      	ldrb	r3, [r3, #4]
 80006d4:	005b      	lsls	r3, r3, #1
 80006d6:	2103      	movs	r1, #3
 80006d8:	fa01 f303 	lsl.w	r3, r1, r3
 80006dc:	43db      	mvns	r3, r3
 80006de:	4619      	mov	r1, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	400a      	ands	r2, r1
 80006e6:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= (0x1<< (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	791b      	ldrb	r3, [r3, #4]
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	2101      	movs	r1, #1
 80006f6:	fa01 f303 	lsl.w	r3, r1, r3
 80006fa:	4619      	mov	r1, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	430a      	orrs	r2, r1
 8000702:	601a      	str	r2, [r3, #0]
		break;
 8000704:	e046      	b.n	8000794 <GPIO_Init+0x1c4>
	}
	case GPIO_MODE_IT_FT:
	{
		EXTI->FTSR|=(0x1<< ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 8000706:	4b95      	ldr	r3, [pc, #596]	; (800095c <GPIO_Init+0x38c>)
 8000708:	68db      	ldr	r3, [r3, #12]
 800070a:	687a      	ldr	r2, [r7, #4]
 800070c:	7912      	ldrb	r2, [r2, #4]
 800070e:	4611      	mov	r1, r2
 8000710:	2201      	movs	r2, #1
 8000712:	408a      	lsls	r2, r1
 8000714:	4611      	mov	r1, r2
 8000716:	4a91      	ldr	r2, [pc, #580]	; (800095c <GPIO_Init+0x38c>)
 8000718:	430b      	orrs	r3, r1
 800071a:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR&=~(0x1<< ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));//Clearing Rising Intrupt line
 800071c:	4b8f      	ldr	r3, [pc, #572]	; (800095c <GPIO_Init+0x38c>)
 800071e:	689b      	ldr	r3, [r3, #8]
 8000720:	687a      	ldr	r2, [r7, #4]
 8000722:	7912      	ldrb	r2, [r2, #4]
 8000724:	4611      	mov	r1, r2
 8000726:	2201      	movs	r2, #1
 8000728:	408a      	lsls	r2, r1
 800072a:	43d2      	mvns	r2, r2
 800072c:	4611      	mov	r1, r2
 800072e:	4a8b      	ldr	r2, [pc, #556]	; (800095c <GPIO_Init+0x38c>)
 8000730:	400b      	ands	r3, r1
 8000732:	6093      	str	r3, [r2, #8]
		break;
 8000734:	e02e      	b.n	8000794 <GPIO_Init+0x1c4>
	}
	case GPIO_MODE_IT_RT:
	{
		EXTI->RTSR|=(0x1<< ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 8000736:	4b89      	ldr	r3, [pc, #548]	; (800095c <GPIO_Init+0x38c>)
 8000738:	689b      	ldr	r3, [r3, #8]
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	7912      	ldrb	r2, [r2, #4]
 800073e:	4611      	mov	r1, r2
 8000740:	2201      	movs	r2, #1
 8000742:	408a      	lsls	r2, r1
 8000744:	4611      	mov	r1, r2
 8000746:	4a85      	ldr	r2, [pc, #532]	; (800095c <GPIO_Init+0x38c>)
 8000748:	430b      	orrs	r3, r1
 800074a:	6093      	str	r3, [r2, #8]
		EXTI->FTSR&=~(0x01<< ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));// Clearing the falling intrupt line
 800074c:	4b83      	ldr	r3, [pc, #524]	; (800095c <GPIO_Init+0x38c>)
 800074e:	68db      	ldr	r3, [r3, #12]
 8000750:	687a      	ldr	r2, [r7, #4]
 8000752:	7912      	ldrb	r2, [r2, #4]
 8000754:	4611      	mov	r1, r2
 8000756:	2201      	movs	r2, #1
 8000758:	408a      	lsls	r2, r1
 800075a:	43d2      	mvns	r2, r2
 800075c:	4611      	mov	r1, r2
 800075e:	4a7f      	ldr	r2, [pc, #508]	; (800095c <GPIO_Init+0x38c>)
 8000760:	400b      	ands	r3, r1
 8000762:	60d3      	str	r3, [r2, #12]
		break;
 8000764:	e016      	b.n	8000794 <GPIO_Init+0x1c4>
	}
	case GPIO_MODE_IT_RFT:
	{
		EXTI->RTSR|=(0x1<< ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 8000766:	4b7d      	ldr	r3, [pc, #500]	; (800095c <GPIO_Init+0x38c>)
 8000768:	689b      	ldr	r3, [r3, #8]
 800076a:	687a      	ldr	r2, [r7, #4]
 800076c:	7912      	ldrb	r2, [r2, #4]
 800076e:	4611      	mov	r1, r2
 8000770:	2201      	movs	r2, #1
 8000772:	408a      	lsls	r2, r1
 8000774:	4611      	mov	r1, r2
 8000776:	4a79      	ldr	r2, [pc, #484]	; (800095c <GPIO_Init+0x38c>)
 8000778:	430b      	orrs	r3, r1
 800077a:	6093      	str	r3, [r2, #8]
		EXTI->FTSR|=(0x1<< ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));// Clearing the falling intrupt line
 800077c:	4b77      	ldr	r3, [pc, #476]	; (800095c <GPIO_Init+0x38c>)
 800077e:	68db      	ldr	r3, [r3, #12]
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	7912      	ldrb	r2, [r2, #4]
 8000784:	4611      	mov	r1, r2
 8000786:	2201      	movs	r2, #1
 8000788:	408a      	lsls	r2, r1
 800078a:	4611      	mov	r1, r2
 800078c:	4a73      	ldr	r2, [pc, #460]	; (800095c <GPIO_Init+0x38c>)
 800078e:	430b      	orrs	r3, r1
 8000790:	60d3      	str	r3, [r2, #12]
	}
	default: {
		break;
 8000792:	bf00      	nop
	}

	}
	//2. configure the speed

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	799b      	ldrb	r3, [r3, #6]
 8000798:	461a      	mov	r2, r3
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	791b      	ldrb	r3, [r3, #4]
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	fa02 f303 	lsl.w	r3, r2, r3
 80007a4:	60fb      	str	r3, [r7, #12]
	(pGPIOHandle->pGPIOx->OSPEEDR) &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	689a      	ldr	r2, [r3, #8]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	791b      	ldrb	r3, [r3, #4]
 80007b0:	005b      	lsls	r3, r3, #1
 80007b2:	2103      	movs	r1, #3
 80007b4:	fa01 f303 	lsl.w	r3, r1, r3
 80007b8:	43db      	mvns	r3, r3
 80007ba:	4619      	mov	r1, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	400a      	ands	r2, r1
 80007c2:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	6899      	ldr	r1, [r3, #8]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	68fa      	ldr	r2, [r7, #12]
 80007d0:	430a      	orrs	r2, r1
 80007d2:	609a      	str	r2, [r3, #8]

	//Pull Push Configuration
	temp=0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	60fb      	str	r3, [r7, #12]
	temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl<<(2*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	79db      	ldrb	r3, [r3, #7]
 80007dc:	461a      	mov	r2, r3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	791b      	ldrb	r3, [r3, #4]
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	fa02 f303 	lsl.w	r3, r2, r3
 80007e8:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR|= ~(0x3<< (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	68da      	ldr	r2, [r3, #12]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	791b      	ldrb	r3, [r3, #4]
 80007f4:	005b      	lsls	r3, r3, #1
 80007f6:	2103      	movs	r1, #3
 80007f8:	fa01 f303 	lsl.w	r3, r1, r3
 80007fc:	43db      	mvns	r3, r3
 80007fe:	4619      	mov	r1, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	430a      	orrs	r2, r1
 8000806:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR|=temp;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	68d9      	ldr	r1, [r3, #12]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	68fa      	ldr	r2, [r7, #12]
 8000814:	430a      	orrs	r2, r1
 8000816:	60da      	str	r2, [r3, #12]
//	pGPIOHandle->pGPIOx->OTYPER|=temp;
//
	//Alternative Functionality Mode
//	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode==GPIO_MODE_ALTFN)
//	{
		pGPIOHandle->pGPIOx->AFR[pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/8]&=~(0xF<<(4*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber %8)));
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	687a      	ldr	r2, [r7, #4]
 800081e:	7912      	ldrb	r2, [r2, #4]
 8000820:	08d2      	lsrs	r2, r2, #3
 8000822:	b2d0      	uxtb	r0, r2
 8000824:	4602      	mov	r2, r0
 8000826:	3208      	adds	r2, #8
 8000828:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	791b      	ldrb	r3, [r3, #4]
 8000830:	f003 0307 	and.w	r3, r3, #7
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	210f      	movs	r1, #15
 8000838:	fa01 f303 	lsl.w	r3, r1, r3
 800083c:	43db      	mvns	r3, r3
 800083e:	4619      	mov	r1, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4011      	ands	r1, r2
 8000846:	f100 0208 	add.w	r2, r0, #8
 800084a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/8]|=(pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode)<<(4*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber %8));
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	7912      	ldrb	r2, [r2, #4]
 8000856:	08d2      	lsrs	r2, r2, #3
 8000858:	b2d1      	uxtb	r1, r2
 800085a:	460a      	mov	r2, r1
 800085c:	3208      	adds	r2, #8
 800085e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	7a5b      	ldrb	r3, [r3, #9]
 8000866:	4618      	mov	r0, r3
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	791b      	ldrb	r3, [r3, #4]
 800086c:	f003 0307 	and.w	r3, r3, #7
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	fa00 f303 	lsl.w	r3, r0, r3
 8000876:	461c      	mov	r4, r3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4608      	mov	r0, r1
 800087e:	ea42 0104 	orr.w	r1, r2, r4
 8000882:	f100 0208 	add.w	r2, r0, #8
 8000886:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
//	}
	//2. configure the GPIO port selection in SYSCFG_EXTICR
	uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	791b      	ldrb	r3, [r3, #4]
 800088e:	089b      	lsrs	r3, r3, #2
 8000890:	72fb      	strb	r3, [r7, #11]
	uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	791b      	ldrb	r3, [r3, #4]
 8000896:	f003 0303 	and.w	r3, r3, #3
 800089a:	72bb      	strb	r3, [r7, #10]
	uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a2f      	ldr	r2, [pc, #188]	; (8000960 <GPIO_Init+0x390>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d039      	beq.n	800091a <GPIO_Init+0x34a>
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a2e      	ldr	r2, [pc, #184]	; (8000964 <GPIO_Init+0x394>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d032      	beq.n	8000916 <GPIO_Init+0x346>
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a2c      	ldr	r2, [pc, #176]	; (8000968 <GPIO_Init+0x398>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d02b      	beq.n	8000912 <GPIO_Init+0x342>
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a2b      	ldr	r2, [pc, #172]	; (800096c <GPIO_Init+0x39c>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d024      	beq.n	800090e <GPIO_Init+0x33e>
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a29      	ldr	r2, [pc, #164]	; (8000970 <GPIO_Init+0x3a0>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d01d      	beq.n	800090a <GPIO_Init+0x33a>
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a28      	ldr	r2, [pc, #160]	; (8000974 <GPIO_Init+0x3a4>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d016      	beq.n	8000906 <GPIO_Init+0x336>
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a26      	ldr	r2, [pc, #152]	; (8000978 <GPIO_Init+0x3a8>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d00f      	beq.n	8000902 <GPIO_Init+0x332>
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a25      	ldr	r2, [pc, #148]	; (800097c <GPIO_Init+0x3ac>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d008      	beq.n	80008fe <GPIO_Init+0x32e>
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a23      	ldr	r2, [pc, #140]	; (8000980 <GPIO_Init+0x3b0>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d101      	bne.n	80008fa <GPIO_Init+0x32a>
 80008f6:	2308      	movs	r3, #8
 80008f8:	e010      	b.n	800091c <GPIO_Init+0x34c>
 80008fa:	2300      	movs	r3, #0
 80008fc:	e00e      	b.n	800091c <GPIO_Init+0x34c>
 80008fe:	2307      	movs	r3, #7
 8000900:	e00c      	b.n	800091c <GPIO_Init+0x34c>
 8000902:	2306      	movs	r3, #6
 8000904:	e00a      	b.n	800091c <GPIO_Init+0x34c>
 8000906:	2305      	movs	r3, #5
 8000908:	e008      	b.n	800091c <GPIO_Init+0x34c>
 800090a:	2304      	movs	r3, #4
 800090c:	e006      	b.n	800091c <GPIO_Init+0x34c>
 800090e:	2303      	movs	r3, #3
 8000910:	e004      	b.n	800091c <GPIO_Init+0x34c>
 8000912:	2302      	movs	r3, #2
 8000914:	e002      	b.n	800091c <GPIO_Init+0x34c>
 8000916:	2301      	movs	r3, #1
 8000918:	e000      	b.n	800091c <GPIO_Init+0x34c>
 800091a:	2300      	movs	r3, #0
 800091c:	727b      	strb	r3, [r7, #9]
	SYSCFG_PCLK_EN();
 800091e:	4b19      	ldr	r3, [pc, #100]	; (8000984 <GPIO_Init+0x3b4>)
 8000920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000922:	4a18      	ldr	r2, [pc, #96]	; (8000984 <GPIO_Init+0x3b4>)
 8000924:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000928:	6453      	str	r3, [r2, #68]	; 0x44
	SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 800092a:	7a7a      	ldrb	r2, [r7, #9]
 800092c:	7abb      	ldrb	r3, [r7, #10]
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	fa02 f103 	lsl.w	r1, r2, r3
 8000934:	4a14      	ldr	r2, [pc, #80]	; (8000988 <GPIO_Init+0x3b8>)
 8000936:	7afb      	ldrb	r3, [r7, #11]
 8000938:	3302      	adds	r3, #2
 800093a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	//3 . enable the exti interrupt delivery using IMR
	EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800093e:	4b07      	ldr	r3, [pc, #28]	; (800095c <GPIO_Init+0x38c>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	687a      	ldr	r2, [r7, #4]
 8000944:	7912      	ldrb	r2, [r2, #4]
 8000946:	4611      	mov	r1, r2
 8000948:	2201      	movs	r2, #1
 800094a:	408a      	lsls	r2, r1
 800094c:	4611      	mov	r1, r2
 800094e:	4a03      	ldr	r2, [pc, #12]	; (800095c <GPIO_Init+0x38c>)
 8000950:	430b      	orrs	r3, r1
 8000952:	6013      	str	r3, [r2, #0]
}
 8000954:	bf00      	nop
 8000956:	3714      	adds	r7, #20
 8000958:	46bd      	mov	sp, r7
 800095a:	bd90      	pop	{r4, r7, pc}
 800095c:	40013c00 	.word	0x40013c00
 8000960:	40020000 	.word	0x40020000
 8000964:	40020400 	.word	0x40020400
 8000968:	40020800 	.word	0x40020800
 800096c:	40020c00 	.word	0x40020c00
 8000970:	40021000 	.word	0x40021000
 8000974:	40021400 	.word	0x40021400
 8000978:	40021800 	.word	0x40021800
 800097c:	40021c00 	.word	0x40021c00
 8000980:	40022000 	.word	0x40022000
 8000984:	40023800 	.word	0x40023800
 8000988:	40013800 	.word	0x40013800

0800098c <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	460b      	mov	r3, r1
 8000996:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000998:	78fb      	ldrb	r3, [r7, #3]
 800099a:	2b01      	cmp	r3, #1
 800099c:	d162      	bne.n	8000a64 <GPIO_PeriClockControl+0xd8>
	{
		if (pGPIOx == GPIOA) {
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4a64      	ldr	r2, [pc, #400]	; (8000b34 <GPIO_PeriClockControl+0x1a8>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d106      	bne.n	80009b4 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80009a6:	4b64      	ldr	r3, [pc, #400]	; (8000b38 <GPIO_PeriClockControl+0x1ac>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a63      	ldr	r2, [pc, #396]	; (8000b38 <GPIO_PeriClockControl+0x1ac>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
		} else if (pGPIOx == GPIOI) {
			GPIOI_PCLK_DI();
		}
	}

}
 80009b2:	e0b9      	b.n	8000b28 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOB) {
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	4a61      	ldr	r2, [pc, #388]	; (8000b3c <GPIO_PeriClockControl+0x1b0>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d106      	bne.n	80009ca <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80009bc:	4b5e      	ldr	r3, [pc, #376]	; (8000b38 <GPIO_PeriClockControl+0x1ac>)
 80009be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c0:	4a5d      	ldr	r2, [pc, #372]	; (8000b38 <GPIO_PeriClockControl+0x1ac>)
 80009c2:	f043 0302 	orr.w	r3, r3, #2
 80009c6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009c8:	e0ae      	b.n	8000b28 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOC) {
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4a5c      	ldr	r2, [pc, #368]	; (8000b40 <GPIO_PeriClockControl+0x1b4>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d106      	bne.n	80009e0 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80009d2:	4b59      	ldr	r3, [pc, #356]	; (8000b38 <GPIO_PeriClockControl+0x1ac>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a58      	ldr	r2, [pc, #352]	; (8000b38 <GPIO_PeriClockControl+0x1ac>)
 80009d8:	f043 0304 	orr.w	r3, r3, #4
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009de:	e0a3      	b.n	8000b28 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOD) {
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	4a58      	ldr	r2, [pc, #352]	; (8000b44 <GPIO_PeriClockControl+0x1b8>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d106      	bne.n	80009f6 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80009e8:	4b53      	ldr	r3, [pc, #332]	; (8000b38 <GPIO_PeriClockControl+0x1ac>)
 80009ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ec:	4a52      	ldr	r2, [pc, #328]	; (8000b38 <GPIO_PeriClockControl+0x1ac>)
 80009ee:	f043 0308 	orr.w	r3, r3, #8
 80009f2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009f4:	e098      	b.n	8000b28 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOE) {
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a53      	ldr	r2, [pc, #332]	; (8000b48 <GPIO_PeriClockControl+0x1bc>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d106      	bne.n	8000a0c <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80009fe:	4b4e      	ldr	r3, [pc, #312]	; (8000b38 <GPIO_PeriClockControl+0x1ac>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a4d      	ldr	r2, [pc, #308]	; (8000b38 <GPIO_PeriClockControl+0x1ac>)
 8000a04:	f043 0310 	orr.w	r3, r3, #16
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a0a:	e08d      	b.n	8000b28 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOF) {
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4a4f      	ldr	r2, [pc, #316]	; (8000b4c <GPIO_PeriClockControl+0x1c0>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d106      	bne.n	8000a22 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000a14:	4b48      	ldr	r3, [pc, #288]	; (8000b38 <GPIO_PeriClockControl+0x1ac>)
 8000a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a18:	4a47      	ldr	r2, [pc, #284]	; (8000b38 <GPIO_PeriClockControl+0x1ac>)
 8000a1a:	f043 0320 	orr.w	r3, r3, #32
 8000a1e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a20:	e082      	b.n	8000b28 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOG) {
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4a4a      	ldr	r2, [pc, #296]	; (8000b50 <GPIO_PeriClockControl+0x1c4>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d106      	bne.n	8000a38 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000a2a:	4b43      	ldr	r3, [pc, #268]	; (8000b38 <GPIO_PeriClockControl+0x1ac>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a42      	ldr	r2, [pc, #264]	; (8000b38 <GPIO_PeriClockControl+0x1ac>)
 8000a30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a36:	e077      	b.n	8000b28 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOH) {
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4a46      	ldr	r2, [pc, #280]	; (8000b54 <GPIO_PeriClockControl+0x1c8>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d106      	bne.n	8000a4e <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000a40:	4b3d      	ldr	r3, [pc, #244]	; (8000b38 <GPIO_PeriClockControl+0x1ac>)
 8000a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a44:	4a3c      	ldr	r2, [pc, #240]	; (8000b38 <GPIO_PeriClockControl+0x1ac>)
 8000a46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a4a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a4c:	e06c      	b.n	8000b28 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOI) {
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4a41      	ldr	r2, [pc, #260]	; (8000b58 <GPIO_PeriClockControl+0x1cc>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d168      	bne.n	8000b28 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 8000a56:	4b38      	ldr	r3, [pc, #224]	; (8000b38 <GPIO_PeriClockControl+0x1ac>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a37      	ldr	r2, [pc, #220]	; (8000b38 <GPIO_PeriClockControl+0x1ac>)
 8000a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a62:	e061      	b.n	8000b28 <GPIO_PeriClockControl+0x19c>
		if (pGPIOx == GPIOA) {
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4a33      	ldr	r2, [pc, #204]	; (8000b34 <GPIO_PeriClockControl+0x1a8>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d106      	bne.n	8000a7a <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000a6c:	4b32      	ldr	r3, [pc, #200]	; (8000b38 <GPIO_PeriClockControl+0x1ac>)
 8000a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a70:	4a31      	ldr	r2, [pc, #196]	; (8000b38 <GPIO_PeriClockControl+0x1ac>)
 8000a72:	f023 0301 	bic.w	r3, r3, #1
 8000a76:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a78:	e056      	b.n	8000b28 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOB) {
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a2f      	ldr	r2, [pc, #188]	; (8000b3c <GPIO_PeriClockControl+0x1b0>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d106      	bne.n	8000a90 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 8000a82:	4b2d      	ldr	r3, [pc, #180]	; (8000b38 <GPIO_PeriClockControl+0x1ac>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a2c      	ldr	r2, [pc, #176]	; (8000b38 <GPIO_PeriClockControl+0x1ac>)
 8000a88:	f023 0302 	bic.w	r3, r3, #2
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a8e:	e04b      	b.n	8000b28 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOC) {
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4a2b      	ldr	r2, [pc, #172]	; (8000b40 <GPIO_PeriClockControl+0x1b4>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d106      	bne.n	8000aa6 <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000a98:	4b27      	ldr	r3, [pc, #156]	; (8000b38 <GPIO_PeriClockControl+0x1ac>)
 8000a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9c:	4a26      	ldr	r2, [pc, #152]	; (8000b38 <GPIO_PeriClockControl+0x1ac>)
 8000a9e:	f023 0304 	bic.w	r3, r3, #4
 8000aa2:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000aa4:	e040      	b.n	8000b28 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOD) {
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4a26      	ldr	r2, [pc, #152]	; (8000b44 <GPIO_PeriClockControl+0x1b8>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d106      	bne.n	8000abc <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 8000aae:	4b22      	ldr	r3, [pc, #136]	; (8000b38 <GPIO_PeriClockControl+0x1ac>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a21      	ldr	r2, [pc, #132]	; (8000b38 <GPIO_PeriClockControl+0x1ac>)
 8000ab4:	f023 0308 	bic.w	r3, r3, #8
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000aba:	e035      	b.n	8000b28 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOE) {
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4a22      	ldr	r2, [pc, #136]	; (8000b48 <GPIO_PeriClockControl+0x1bc>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d106      	bne.n	8000ad2 <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000ac4:	4b1c      	ldr	r3, [pc, #112]	; (8000b38 <GPIO_PeriClockControl+0x1ac>)
 8000ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac8:	4a1b      	ldr	r2, [pc, #108]	; (8000b38 <GPIO_PeriClockControl+0x1ac>)
 8000aca:	f023 0310 	bic.w	r3, r3, #16
 8000ace:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ad0:	e02a      	b.n	8000b28 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOF) {
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4a1d      	ldr	r2, [pc, #116]	; (8000b4c <GPIO_PeriClockControl+0x1c0>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d106      	bne.n	8000ae8 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000ada:	4b17      	ldr	r3, [pc, #92]	; (8000b38 <GPIO_PeriClockControl+0x1ac>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a16      	ldr	r2, [pc, #88]	; (8000b38 <GPIO_PeriClockControl+0x1ac>)
 8000ae0:	f023 0320 	bic.w	r3, r3, #32
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ae6:	e01f      	b.n	8000b28 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOG) {
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4a19      	ldr	r2, [pc, #100]	; (8000b50 <GPIO_PeriClockControl+0x1c4>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d106      	bne.n	8000afe <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000af0:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <GPIO_PeriClockControl+0x1ac>)
 8000af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af4:	4a10      	ldr	r2, [pc, #64]	; (8000b38 <GPIO_PeriClockControl+0x1ac>)
 8000af6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000afa:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000afc:	e014      	b.n	8000b28 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOH) {
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4a14      	ldr	r2, [pc, #80]	; (8000b54 <GPIO_PeriClockControl+0x1c8>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d106      	bne.n	8000b14 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 8000b06:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <GPIO_PeriClockControl+0x1ac>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a0b      	ldr	r2, [pc, #44]	; (8000b38 <GPIO_PeriClockControl+0x1ac>)
 8000b0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b12:	e009      	b.n	8000b28 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOI) {
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	4a10      	ldr	r2, [pc, #64]	; (8000b58 <GPIO_PeriClockControl+0x1cc>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d105      	bne.n	8000b28 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <GPIO_PeriClockControl+0x1ac>)
 8000b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b20:	4a05      	ldr	r2, [pc, #20]	; (8000b38 <GPIO_PeriClockControl+0x1ac>)
 8000b22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000b26:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b28:	bf00      	nop
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	40020000 	.word	0x40020000
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40020400 	.word	0x40020400
 8000b40:	40020800 	.word	0x40020800
 8000b44:	40020c00 	.word	0x40020c00
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	40021400 	.word	0x40021400
 8000b50:	40021800 	.word	0x40021800
 8000b54:	40021c00 	.word	0x40021c00
 8000b58:	40022000 	.word	0x40022000

08000b5c <GPIO_WriteToOutputPin>:
 *
 * @Note              -

 */
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	460b      	mov	r3, r1
 8000b66:	70fb      	strb	r3, [r7, #3]
 8000b68:	4613      	mov	r3, r2
 8000b6a:	70bb      	strb	r3, [r7, #2]
	if(Value==ENABLE)
 8000b6c:	78bb      	ldrb	r3, [r7, #2]
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d109      	bne.n	8000b86 <GPIO_WriteToOutputPin+0x2a>
	{
		 pGPIOx->ODR|=(1<<PinNumber);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	695b      	ldr	r3, [r3, #20]
 8000b76:	78fa      	ldrb	r2, [r7, #3]
 8000b78:	2101      	movs	r1, #1
 8000b7a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b7e:	431a      	orrs	r2, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	615a      	str	r2, [r3, #20]
		 pGPIOx->ODR&=~(1<<PinNumber);
	}



}
 8000b84:	e009      	b.n	8000b9a <GPIO_WriteToOutputPin+0x3e>
		 pGPIOx->ODR&=~(1<<PinNumber);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	695b      	ldr	r3, [r3, #20]
 8000b8a:	78fa      	ldrb	r2, [r7, #3]
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b92:	43d2      	mvns	r2, r2
 8000b94:	401a      	ands	r2, r3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	615a      	str	r2, [r3, #20]
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
	...

08000ba8 <delay>:

#include <stdint.h>
#include"stm32f446xx.h"
#include"string.h"
void delay(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 8000bae:	2300      	movs	r3, #0
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	e002      	b.n	8000bba <delay+0x12>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4a04      	ldr	r2, [pc, #16]	; (8000bd0 <delay+0x28>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d9f8      	bls.n	8000bb4 <delay+0xc>
}
 8000bc2:	bf00      	nop
 8000bc4:	bf00      	nop
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	0003d08f 	.word	0x0003d08f

08000bd4 <USART2_Init>:
USART_Handle_t usart2_handle;
//baud Rate
static void uart_set_baudrate(USART_RegDef_t *pUSARTx, uint32_t PeriphClk,  uint32_t BaudRate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);
void USART2_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
	usart2_handle.pUSARTx = USART2;
 8000bd8:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <USART2_Init+0x34>)
 8000bda:	4a0c      	ldr	r2, [pc, #48]	; (8000c0c <USART2_Init+0x38>)
 8000bdc:	601a      	str	r2, [r3, #0]
	//usart2_handle.USART_Config.USART_Baud =USART_STD_BAUD_115200;
	usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 8000bde:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <USART2_Init+0x34>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	73da      	strb	r2, [r3, #15]
	usart2_handle.USART_Config.USART_Mode = USART_MODE_TXRX;
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <USART2_Init+0x34>)
 8000be6:	2202      	movs	r2, #2
 8000be8:	711a      	strb	r2, [r3, #4]
	usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 8000bea:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <USART2_Init+0x34>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	731a      	strb	r2, [r3, #12]
	usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 8000bf0:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <USART2_Init+0x34>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	735a      	strb	r2, [r3, #13]
	usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8000bf6:	4b04      	ldr	r3, [pc, #16]	; (8000c08 <USART2_Init+0x34>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	739a      	strb	r2, [r3, #14]
	USART_Init(&usart2_handle);
 8000bfc:	4802      	ldr	r0, [pc, #8]	; (8000c08 <USART2_Init+0x34>)
 8000bfe:	f7ff fba1 	bl	8000344 <USART_Init>
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000020 	.word	0x20000020
 8000c0c:	40004400 	.word	0x40004400

08000c10 <USART2_GPIOInit>:
void USART2_GPIOInit(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
	GPIO_Handle_t usart_gpios;

	usart_gpios.pGPIOx = GPIOA;
 8000c16:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <USART2_GPIOInit+0x40>)
 8000c18:	607b      	str	r3, [r7, #4]
	usart_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	727b      	strb	r3, [r7, #9]
	usart_gpios.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	733b      	strb	r3, [r7, #12]
	usart_gpios.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000c22:	2301      	movs	r3, #1
 8000c24:	72fb      	strb	r3, [r7, #11]
	usart_gpios.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000c26:	2302      	movs	r3, #2
 8000c28:	72bb      	strb	r3, [r7, #10]
	usart_gpios.GPIO_PinConfig.GPIO_PinAltFunMode =7;
 8000c2a:	2307      	movs	r3, #7
 8000c2c:	737b      	strb	r3, [r7, #13]

	//USART2 TX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber  = GPIO_PIN_NO_2;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff fccb 	bl	80005d0 <GPIO_Init>

	//USART2 RX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff fcc5 	bl	80005d0 <GPIO_Init>


}
 8000c46:	bf00      	nop
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40020000 	.word	0x40020000

08000c54 <LED1_Init>:
void LED1_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioLed;
	memset(&GpioLed,0,sizeof(GpioLed));
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	220c      	movs	r2, #12
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4618      	mov	r0, r3
 8000c62:	f000 f8be 	bl	8000de2 <memset>
	GpioLed.pGPIOx = GPIOA;
 8000c66:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <LED1_Init+0x38>)
 8000c68:	607b      	str	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 8000c6a:	2305      	movs	r3, #5
 8000c6c:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	727b      	strb	r3, [r7, #9]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000c72:	2302      	movs	r3, #2
 8000c74:	72bb      	strb	r3, [r7, #10]
	//GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000c76:	2301      	movs	r3, #1
 8000c78:	72fb      	strb	r3, [r7, #11]
	GPIO_Init(&GpioLed);
 8000c7a:	1d3b      	adds	r3, r7, #4
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff fca7 	bl	80005d0 <GPIO_Init>
}
 8000c82:	bf00      	nop
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40020000 	.word	0x40020000

08000c90 <main>:
int main(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
	USART2_GPIOInit();
 8000c94:	f7ff ffbc 	bl	8000c10 <USART2_GPIOInit>
	/*
	 * Led PA5
	 */
	LED1_Init();
 8000c98:	f7ff ffdc 	bl	8000c54 <LED1_Init>


    USART2_Init();
 8000c9c:	f7ff ff9a 	bl	8000bd4 <USART2_Init>
	uart_set_baudrate(USART2,APB1_CLK,UART_BAUDRATE);
 8000ca0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ca4:	4922      	ldr	r1, [pc, #136]	; (8000d30 <main+0xa0>)
 8000ca6:	4823      	ldr	r0, [pc, #140]	; (8000d34 <main+0xa4>)
 8000ca8:	f000 f84c 	bl	8000d44 <uart_set_baudrate>
    USART_PeripheralControl(USART2,ENABLE);
 8000cac:	2101      	movs	r1, #1
 8000cae:	4821      	ldr	r0, [pc, #132]	; (8000d34 <main+0xa4>)
 8000cb0:	f7ff fc04 	bl	80004bc <USART_PeripheralControl>

    while(1)
    {

		USART_ReceiveData(&usart2_handle,(uint8_t *)rx_buf,sizeof(rx_buf));
 8000cb4:	2203      	movs	r2, #3
 8000cb6:	4920      	ldr	r1, [pc, #128]	; (8000d38 <main+0xa8>)
 8000cb8:	4820      	ldr	r0, [pc, #128]	; (8000d3c <main+0xac>)
 8000cba:	f7ff fc30 	bl	800051e <USART_ReceiveData>
		if(rx_buf[0]=='1')
 8000cbe:	4b1e      	ldr	r3, [pc, #120]	; (8000d38 <main+0xa8>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b31      	cmp	r3, #49	; 0x31
 8000cc4:	d10b      	bne.n	8000cde <main+0x4e>
		{
			GPIO_WriteToOutputPin(GPIOA, GPIO_PIN_NO_5, ENABLE);
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	2105      	movs	r1, #5
 8000cca:	481d      	ldr	r0, [pc, #116]	; (8000d40 <main+0xb0>)
 8000ccc:	f7ff ff46 	bl	8000b5c <GPIO_WriteToOutputPin>
			delay();
 8000cd0:	f7ff ff6a 	bl	8000ba8 <delay>
			GPIO_WriteToOutputPin(GPIOA, GPIO_PIN_NO_5, DISABLE);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2105      	movs	r1, #5
 8000cd8:	4819      	ldr	r0, [pc, #100]	; (8000d40 <main+0xb0>)
 8000cda:	f7ff ff3f 	bl	8000b5c <GPIO_WriteToOutputPin>
		}
		if(rx_buf[1]=='2')
 8000cde:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <main+0xa8>)
 8000ce0:	785b      	ldrb	r3, [r3, #1]
 8000ce2:	2b32      	cmp	r3, #50	; 0x32
 8000ce4:	d10b      	bne.n	8000cfe <main+0x6e>
		{
			GPIO_WriteToOutputPin(GPIOA, GPIO_PIN_NO_5, ENABLE);
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	2105      	movs	r1, #5
 8000cea:	4815      	ldr	r0, [pc, #84]	; (8000d40 <main+0xb0>)
 8000cec:	f7ff ff36 	bl	8000b5c <GPIO_WriteToOutputPin>
			delay();
 8000cf0:	f7ff ff5a 	bl	8000ba8 <delay>
			GPIO_WriteToOutputPin(GPIOA, GPIO_PIN_NO_5, DISABLE);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2105      	movs	r1, #5
 8000cf8:	4811      	ldr	r0, [pc, #68]	; (8000d40 <main+0xb0>)
 8000cfa:	f7ff ff2f 	bl	8000b5c <GPIO_WriteToOutputPin>
		}
		if(rx_buf[2]=='3')
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <main+0xa8>)
 8000d00:	789b      	ldrb	r3, [r3, #2]
 8000d02:	2b33      	cmp	r3, #51	; 0x33
 8000d04:	d10c      	bne.n	8000d20 <main+0x90>
			{
			GPIO_WriteToOutputPin(GPIOA, GPIO_PIN_NO_5, ENABLE);
 8000d06:	2201      	movs	r2, #1
 8000d08:	2105      	movs	r1, #5
 8000d0a:	480d      	ldr	r0, [pc, #52]	; (8000d40 <main+0xb0>)
 8000d0c:	f7ff ff26 	bl	8000b5c <GPIO_WriteToOutputPin>
			delay();
 8000d10:	f7ff ff4a 	bl	8000ba8 <delay>
			GPIO_WriteToOutputPin(GPIOA, GPIO_PIN_NO_5, DISABLE);
 8000d14:	2200      	movs	r2, #0
 8000d16:	2105      	movs	r1, #5
 8000d18:	4809      	ldr	r0, [pc, #36]	; (8000d40 <main+0xb0>)
 8000d1a:	f7ff ff1f 	bl	8000b5c <GPIO_WriteToOutputPin>
 8000d1e:	e7c9      	b.n	8000cb4 <main+0x24>
			}
		else{
			GPIO_WriteToOutputPin(GPIOA, GPIO_PIN_NO_5, DISABLE);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2105      	movs	r1, #5
 8000d24:	4806      	ldr	r0, [pc, #24]	; (8000d40 <main+0xb0>)
 8000d26:	f7ff ff19 	bl	8000b5c <GPIO_WriteToOutputPin>
			delay();
 8000d2a:	f7ff ff3d 	bl	8000ba8 <delay>
		USART_ReceiveData(&usart2_handle,(uint8_t *)rx_buf,sizeof(rx_buf));
 8000d2e:	e7c1      	b.n	8000cb4 <main+0x24>
 8000d30:	00f42400 	.word	0x00f42400
 8000d34:	40004400 	.word	0x40004400
 8000d38:	2000001c 	.word	0x2000001c
 8000d3c:	20000020 	.word	0x20000020
 8000d40:	40020000 	.word	0x40020000

08000d44 <uart_set_baudrate>:
		}

    }
}
 void uart_set_baudrate(USART_RegDef_t *pUSARTx, uint32_t PeriphClk,  uint32_t BaudRate)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
	pUSARTx->BRR =  compute_uart_bd(PeriphClk,BaudRate);
 8000d50:	6879      	ldr	r1, [r7, #4]
 8000d52:	68b8      	ldr	r0, [r7, #8]
 8000d54:	f000 f808 	bl	8000d68 <compute_uart_bd>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	609a      	str	r2, [r3, #8]
}
 8000d60:	bf00      	nop
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <compute_uart_bd>:

 uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	085a      	lsrs	r2, r3, #1
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	441a      	add	r2, r3
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d80:	b29b      	uxth	r3, r3
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
	...

08000d90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d90:	480d      	ldr	r0, [pc, #52]	; (8000dc8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d92:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d94:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d98:	480c      	ldr	r0, [pc, #48]	; (8000dcc <LoopForever+0x6>)
  ldr r1, =_edata
 8000d9a:	490d      	ldr	r1, [pc, #52]	; (8000dd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d9c:	4a0d      	ldr	r2, [pc, #52]	; (8000dd4 <LoopForever+0xe>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da0:	e002      	b.n	8000da8 <LoopCopyDataInit>

08000da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da6:	3304      	adds	r3, #4

08000da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dac:	d3f9      	bcc.n	8000da2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dae:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000db0:	4c0a      	ldr	r4, [pc, #40]	; (8000ddc <LoopForever+0x16>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db4:	e001      	b.n	8000dba <LoopFillZerobss>

08000db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db8:	3204      	adds	r2, #4

08000dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dbc:	d3fb      	bcc.n	8000db6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000dbe:	f000 f819 	bl	8000df4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dc2:	f7ff ff65 	bl	8000c90 <main>

08000dc6 <LoopForever>:

LoopForever:
  b LoopForever
 8000dc6:	e7fe      	b.n	8000dc6 <LoopForever>
  ldr   r0, =_estack
 8000dc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000dd4:	08000e5c 	.word	0x08000e5c
  ldr r2, =_sbss
 8000dd8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000ddc:	20000044 	.word	0x20000044

08000de0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000de0:	e7fe      	b.n	8000de0 <ADC_IRQHandler>

08000de2 <memset>:
 8000de2:	4402      	add	r2, r0
 8000de4:	4603      	mov	r3, r0
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d100      	bne.n	8000dec <memset+0xa>
 8000dea:	4770      	bx	lr
 8000dec:	f803 1b01 	strb.w	r1, [r3], #1
 8000df0:	e7f9      	b.n	8000de6 <memset+0x4>
	...

08000df4 <__libc_init_array>:
 8000df4:	b570      	push	{r4, r5, r6, lr}
 8000df6:	4d0d      	ldr	r5, [pc, #52]	; (8000e2c <__libc_init_array+0x38>)
 8000df8:	4c0d      	ldr	r4, [pc, #52]	; (8000e30 <__libc_init_array+0x3c>)
 8000dfa:	1b64      	subs	r4, r4, r5
 8000dfc:	10a4      	asrs	r4, r4, #2
 8000dfe:	2600      	movs	r6, #0
 8000e00:	42a6      	cmp	r6, r4
 8000e02:	d109      	bne.n	8000e18 <__libc_init_array+0x24>
 8000e04:	4d0b      	ldr	r5, [pc, #44]	; (8000e34 <__libc_init_array+0x40>)
 8000e06:	4c0c      	ldr	r4, [pc, #48]	; (8000e38 <__libc_init_array+0x44>)
 8000e08:	f000 f818 	bl	8000e3c <_init>
 8000e0c:	1b64      	subs	r4, r4, r5
 8000e0e:	10a4      	asrs	r4, r4, #2
 8000e10:	2600      	movs	r6, #0
 8000e12:	42a6      	cmp	r6, r4
 8000e14:	d105      	bne.n	8000e22 <__libc_init_array+0x2e>
 8000e16:	bd70      	pop	{r4, r5, r6, pc}
 8000e18:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e1c:	4798      	blx	r3
 8000e1e:	3601      	adds	r6, #1
 8000e20:	e7ee      	b.n	8000e00 <__libc_init_array+0xc>
 8000e22:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e26:	4798      	blx	r3
 8000e28:	3601      	adds	r6, #1
 8000e2a:	e7f2      	b.n	8000e12 <__libc_init_array+0x1e>
 8000e2c:	08000e54 	.word	0x08000e54
 8000e30:	08000e54 	.word	0x08000e54
 8000e34:	08000e54 	.word	0x08000e54
 8000e38:	08000e58 	.word	0x08000e58

08000e3c <_init>:
 8000e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e3e:	bf00      	nop
 8000e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e42:	bc08      	pop	{r3}
 8000e44:	469e      	mov	lr, r3
 8000e46:	4770      	bx	lr

08000e48 <_fini>:
 8000e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e4a:	bf00      	nop
 8000e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e4e:	bc08      	pop	{r3}
 8000e50:	469e      	mov	lr, r3
 8000e52:	4770      	bx	lr
